
// the overload type derives from the signatures of its cases.

let f = (x: num) => nil | (x: bool) => nil;

assert(type(f) == TOverload(num -> void, bool -> void));

// functions map into overloads.

// unit.

let f = TOverload.lift(num -> void);

assert(len(f.cases) == 1);
assert(f.cases[0] == num -> void);

// functions with disjunctive domains map into overloads
// with one case per disjunct and uniform range.

let f = TOverload.lift((num % string) -> void);

assert(len(f.cases) == 2);
assert(num -> void in f.cases);
assert(string -> void in f.cases);

let f = TOverload.lift((num % string) -> (void % bool));

assert(len(f.cases) == 2);
assert(num -> (void % bool) in f.cases);
assert(string -> (void % bool) in f.cases);

// concatenating overload types preserves the order of their cases.

let f = TOverload(num -> void) & TOverload(bool -> void);

assert(f is TOverload);
assert(len(f.cases) == 2);
assert(f.cases[0] == num -> void);
assert(f.cases[1] == bool -> void);

// equality of overloads is equality of their cases.

assert(f == (num -> void & bool -> void));
assert(f != (bool -> void & num -> void));
assert(f != (num -> void & num -> void));
assert(f != (bool -> void & bool -> void));

// overload is subtype of function.
// --------------------------------------

// uniform range.

let f = (x: num) => nil | (x: bool) => nil;

// (num -> void & bool -> void) <| num -> w
typecheck((x: num) => f(x));

// (num -> void & bool -> void) <| bool -> w
typecheck((x: bool) => f(x));

// (num -> void & bool -> void) <| (num % bool) -> w
// (num -> void & bool -> void) <| (num -> w & bool -> w)
typecheck((x: num % bool) => f(x));

// (num -> void & bool -> void) <| (num % bool % string) -> w
// (num -> void & bool -> void) <| (num -> w & bool -> w & string -> w)
typefail((x: num % bool % string) => f(x));

// order of the cases doesn't matter.

let f = (x: bool) => nil | (x: num) => nil;

typecheck((x: num) => f(x));
typecheck((x: bool) => f(x));
typecheck((x: num % bool) => f(x));

typefail((x: num % bool % string) => f(x));

// heterogenous range.

let f = (x: num) => true | (x: bool) => nil;

// (num -> bool & bool -> void) <| num -> w
typecheck((x: num) => f(x));

// (num -> bool & bool -> void) <| bool -> w
typecheck((x: bool) => f(x));

// (num -> bool & bool -> void) <| (num % bool) -> w
// (num -> bool & bool -> void) <| (num -> w & bool -> w)
typecheck((x: bool % num) => f(x));

// (num -> bool & bool -> void) <| (num % bool % string) -> w
// (num -> bool & bool -> void) <| (num -> w & bool -> w & string -> w)
typefail((x: num % bool % string) => f(x));

// constraints on range.

let f = (x: num) => nil | (x: void) => true;
let g = (x: bool) => x;

typefail((x: num % void) => g(f(x)));
typefail((x: void % num) => g(f(x)));
typefail((x: num) => g(f(x)));

typecheck((x: void) => g(f(x)));

let h = (x: void) => x;

typefail((x: num % void) => h(f(x)));
typefail((x: void) => h(f(x)));

typecheck((x: num) => h(f(x)));

let k = (x: bool % void) => x;

typefail((x: num % void % string) => k(f(x)));

typecheck((x: num % void) => k(f(x)));
typecheck((x: void) => k(f(x)));
typecheck((x: num) => k(f(x)));

let j = (x: bool % void % string) => x;

typefail((x: num % void % string) => j(f(x)));

typecheck((x: num % void) => j(f(x)));
typecheck((x: void) => j(f(x)));
typecheck((x: num) => j(f(x)));

// fn is subtype of overload
// --------------------------------------

// g <| f -> w

// overload has uniform range.

let g : (num -> bool & string -> bool) -> void
      = f => nil;

typecheck((f: (num % string) -> bool) => g(f));

typefail((f: (num % string) -> (bool % void)) => g(f));
typefail((f: num -> bool) => g(f));
typefail((f: string -> bool) => g(f));

// overload has heterogenous range.

let g : (num -> bool & string -> string) -> void
      = f => nil;

typefail((f: (num % string) -> (bool % string)) => g(f));
typefail((f: (num % string) -> (bool % string)) => g(f));

// overload is subtype of overload.
// --------------------------------------

let g : (num -> bool & string -> bool) -> void
      = f => nil;

typecheck((f: num -> bool & string -> bool) => g(f));
typecheck((f: string -> bool & num -> bool) => g(f));

typefail((f: num -> void & string -> bool) => g(f));
typefail((f: num -> bool & string -> void) => g(f));

typecheck((f: string -> bool & num -> bool & bool -> bool) => g(f));
typecheck((f: string -> bool & num -> bool & bool -> void) => g(f));

// an overload composes with itself when its signature allows.

let f = (x: num) => true | (x: bool) => nil;

typefail((x: num % bool) => f(f(x)));
typefail((x: bool) => f(f(x)));

typecheck((x: num) => f(f(x)));
