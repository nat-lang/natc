
// types with variables can be generalized into
// abstract types, functions from types to types.

let a = TVar("a"),
    b = TVar("b"),
    c = TVar("c"),
    d = TVar("d");

let h = TGeneralization(a);
assert(h.fn(b) == b);

let f = TGeneralization(a -> b);
assert(f.fn(c,d) == c -> d);

let g = TGeneralization(TProduct(a,b));
assert(g.fn(c,d) == TProduct(c,d));

// the simple type system can't type the id function.

let _check = SimpleTypeSystem.typecheck(() => {
  let id = x => x;

  id(1);
  id(true);
  id("string");
});

assert(_check.failure());

// but the polymorphic type system can, with the
// aid of abstract types.

// with either explicit abstraction.

typecheck(() => {
  let id: (a => a -> a) = x => x;

  id(1);
  id(true);
  id("string");
});

let id: (a => a -> a) = x => x;

typecheck(() => {
  id(1);
  id(true);
  id("string");
});

// with either one type parameter.

let id: w -> w = x => x;

let abstract = annotations(id)[0];
let concrete = abstract(num);

assert(vType(abstract) == OFunction);

assert(concrete is TFunction);
assert(concrete.domain == num);
assert(concrete.range == num);

typecheck(() => {
  id(1);
  id(true);
  id("string");
});

typecheck(() => {
  let id: w -> w = x => x;

  id(1);
  id(true);
  id("string");
});

// or n + 1 type parameters.

let f: x -> y -> y -> y = a b c => c;

let abstract = annotations(f)[0];
let concrete = abstract(num, string);

assert(vType(abstract) == OFunction);

assert(concrete is TFunction);
assert(concrete.domain == num);
assert(concrete.range is TFunction);
assert(concrete.range.domain == string);
assert(concrete.range.range is TFunction);
assert(concrete.range.range.domain == string);
assert(concrete.range.range.range == string);

typecheck(() => {
  f(1)(1)(1);
  f(1)(true)(false);
  f(1)("foo")("bar");
});

typefail(() => id(1)(1)(true));
typefail(() => id(1)(true)("bar"));
typefail(() => id(1)("foo")(1));

// abstractions can be implicit in parameter annotations.

let id = (x: w) => x;

typecheck(() => {
  id(1);
  id(true);
  id("string");
});

typecheck(() => {
  let id = (x: w) => x;

  id(1);
  id(true);
  id("string");
});

// implicit abstraction in parameter annotation
// preserves identity between type variables.

typecheck((x: w -> z, y: u) => y(x));
typecheck((x: w -> z, y: w) => x(y));

typefail((x: w -> z, y: w) => y(x));

// abstract types become concrete when saturated.

// in declaration annotations.

let f: w -> (w -> w) = x y => y;

typecheck(() => f(1)(1));
typecheck(() => f(true)(true));

typefail(() => f(true)(1));
typefail(() => f(1)(true));

let infix @ : ((v -> w), (u -> v)) -> (u -> w)
            = (f, g) => x => f(g(x));

typecheck((f: bool -> num, g: num -> bool, x: num) => (f @ g)(x));

typefail((f: num -> bool, g: bool -> num, x: num) => (f @ g)(x));

typecheck(
  (x: num, h: num -> bool, g: bool -> string, f: string -> num) => {
    1 + ((f @ g) @ h)(x);
    1 + (f @ (g @ h))(x);
  }
);

// and in parameter annotations.

let f = (x: w) => (y: w) => y;

typecheck(() => f(1)(1));
typecheck(() => f(true)(true));

// fix me.
// typefail(() => f(true)(1));
// typefail(() => f(1)(true));

// type parameters propagate to embedded type constructors.

let t = type((x: w) => ({x}));

assert(t is TAbstract);

let concrete = t.instantiate();

assert(concrete is ->);
assert(concrete.domain is TVar);
assert(concrete.range is TSet);

let concrete = t(num);

assert(concrete is ->);
assert(concrete.domain == num);
assert(concrete.range == TSet(num));

let f = (x: u, y: v, z: w) => ({x,y,z});
let t = type(f);

assert(t is TAbstract);

let concrete = t.instantiate();

assert(concrete is ->);
assert(concrete.domain is TProduct);
assert(concrete.range is TSet);
assert(concrete.range.element is TSum);

let concrete = t(num, num, num);

assert(concrete is ->);
assert(concrete.domain == TProduct(num, num, num));
assert(concrete.range == TSet(num));

// the polymorphic type system types overloads
// with implicit variables in their case signatures.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

let g: num -> string = x => "y";
let h: string -> num = x => 1;

typecheck(() => f(g, 1));
typecheck(() => f(1, g));
typecheck(() => f(h, f(1, g)));
typecheck(() => f(h, f(g, 1)));
typecheck(() => f(f(g, 1), h));
typecheck(() => f(f(1, g), h));

typefail(() => f(g, "x"));
typefail(() => f("x", g));
typefail(() => f(h, f("x", g)));
typefail(() => f(h, f(g, "x")));
typefail(() => f(f(g, "x"), h));
typefail(() => f(f("x", g), h));

// the polymorphic type system types quantification.

typecheck(() => for all (x in {true,false}) x);
typecheck(() => for some (x in {true,false}) x);
typecheck(() => for no (x in {true,false}) x);

typefail(() => for all (x in {"true","false"}) x);
typefail(() => for some (x in {"true","false"}) x);
typefail(() => for no (x in {"true","false"}) x);

typecheck(() => for all (x in {1,2,3}) x in {1,2});
typecheck(() => for some (x in {1,2,3}) x in {1,2});
typecheck(() => for no (x in {1,2,3}) x in {1,2});

typefail(() => for all (x in {1,2,3}) x);
typefail(() => for some (x in {1,2,3}) x);
typefail(() => for no (x in {1,2,3}) x);

typecheck(() => for some (x in {1,2,3}) x > 1 and x < 3);

// reconstruction.

let a = Type(), b = Type(), c = Type(), d = Type();

// the type of identity is inferrable in first order context.

typecheck(() => {
  let id = x => x;

  id(1);
  id(true);
  id("string");
});

// but not in second order.

typefail(id => {
  id(1);
  id(true);
  id("string");
});

// the type of forward application is inferrable.

let f = g x => g(x);
let t = type(f);

assert(t unifies ((a -> b) -> (a -> b)));
assert(t unifies ((b -> a) -> (b -> a)));

assert(!(t unifies ((a -> b) -> (b -> a))));
assert(!(t unifies ((b -> a) -> (a -> b))));

assert(!(t unifies ((a -> a) -> (a -> b))));
assert(!(t unifies ((b -> b) -> (a -> b))));

assert(!(t unifies ((a -> b) -> (a -> a))));
assert(!(t unifies ((a -> b) -> (b -> b))));

// the type of backward application is inferrable.

let f = x g => g(x);
let t = type(f);

assert(t unifies (a -> ((a -> b) -> b)));
assert(t unifies (b -> ((b -> a) -> a)));

assert(!(t unifies (b -> ((a -> b) -> b))));
assert(!(t unifies (a -> ((b -> a) -> a))));

assert(!(t unifies (a -> ((b -> a) -> b))));
assert(!(t unifies (b -> ((a -> b) -> a))));

assert(!(t unifies (a -> ((a -> b) -> a))));
assert(!(t unifies (b -> ((b -> a) -> b))));

// the type of composition is inferrable.

let @ = f g x => f(g(x));
let t = type(@);

assert(t unifies ((a -> b) -> ((c -> a) -> (c -> b))));
assert(!(t unifies ((c -> a) -> ((a -> b) -> (c -> b)))));

// the type of type driven application is inferrable.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

let t = type(f);

assert(t unifies (((a -> b, a) -> b) & ((a, a -> b) -> b)));
assert(t unifies (((a, a -> b) -> b) & ((a -> b, a) -> b)));

assert(!(t unifies (((c -> b, a) -> b) & ((a, a -> b) -> b))));
assert(!(t unifies (((a -> c, a) -> b) & ((a, a -> b) -> b))));
assert(!(t unifies (((a -> b, c) -> b) & ((a, a -> b) -> b))));
assert(!(t unifies (((a -> b, a) -> c) & ((a, a -> b) -> b))));
assert(!(t unifies (((a -> b, a) -> b) & ((c, a -> b) -> b))));
assert(!(t unifies (((a -> b, a) -> b) & ((a, c -> b) -> b))));
assert(!(t unifies (((a -> b, a) -> b) & ((a, a -> c) -> b))));
assert(!(t unifies (((a -> b, a) -> b) & ((a, a -> b) -> c))));

// the type of curried type driven application is inferrable.

let f = (a: x -> y) => ((b: x) => a(b)) | (a: x) => ((b: x -> y) => b(a));
let t = type(f);

assert(t unifies (((a -> b) -> (a -> b)) & (a -> ((a -> b) -> b))));
assert(t unifies ((a -> ((a -> b) -> b)) & ((a -> b) -> (a -> b))));

assert(!(t unifies (((a -> b) -> (b -> b)) & (a -> ((a -> b) -> b)))));

let f = (a: x) => ((b: x -> y) => b(a)) | (a: x -> y) => ((b: x) => a(b));
let t = type(f);

assert(t unifies (((a -> b) -> (a -> b)) & (a -> ((a -> b) -> b))));
assert(t unifies ((a -> ((a -> b) -> b)) & ((a -> b) -> (a -> b))));

assert(!(t unifies (((a -> b) -> (b -> b)) & (a -> ((a -> b) -> b)))));

// nested abstract types normalize to a single first order type.

let t = type(x y => y);

assert(t unifies (a -> (a -> a)));
assert(t unifies (a -> (b -> b)));
assert(t unifies (b -> (a -> a)));
assert(t unifies (b -> (b -> b)));

assert(!(t unifies (a -> (b -> a))));
assert(!(t unifies (a -> (a -> b))));

// nested abstract cases normalize to a single abstract overload.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

let t = type(f);

assert(t is TGeneralization);
assert(t unifies (TProduct(a -> b, a) -> b) & (TProduct(d, c -> d) -> d));

// the poly type system exposes an api for instantiating
// the annotations of applied abstract functions.

let instantiate = PolyTypeSystem.instantiate;

let f: w -> (w -> w) = x y => y;
let t = instantiate(f, 1);

assert(t == num -> num);

let f: w -> (w -> bool) = x y => true;
let t = instantiate(f, 1);

assert(t == num -> bool);

let f: w -> (u -> (w -> u)) = x y z => y;
let t = instantiate(f, 1);

assert(t is TGeneralization);

assert(t unifies (a -> (num -> a)));
assert(!(t unifies (a -> (bool -> a))));
assert(!(t unifies (a -> (num -> b))));

let f: (w,u) -> (u -> (w -> u)) = x y z => y;

let t = instantiate(f, 1, 1);
assert(t == num -> (num -> num));

let t = instantiate(f, 1, true);
assert(t == bool -> (num -> bool));

// maps.

// instantiation.

typecheck(() => ({1: true}));
typecheck(() => ({1: true, true: 1}));
typecheck(() => ({1: {true: 1}}));
typecheck(() => ({1: {true: {1: true}}}));

// key type.

typecheck((x: string) => ({"1": true})[x]);
typecheck((x: bool) => ({1: true, false: 3})[x]);
typecheck((x: num) => ({1: true, 2: false, 3: false})[x]);

// key types.

typecheck((x: bool or num) => ({1: true, false: 3})[x]);
typefail((x: string) => ({1: true, false: 3})[x]);

// val type.

typecheck((x: num) => ((x: bool) => {})({1: true}[x]));

// val types.

typecheck(() => ((x: num) => {})({1: 1}[1]));
typecheck(() => ((x: num or bool) => {})({1: true, true: 1}[1]));
typecheck(() => ((x: num or bool) => {})({1: true, true: 1}[true]));
typecheck(() => ((x: num or bool or string) => {})({1: true, true: 1}[1]));
typecheck(() => ((x: num or bool or string) => {})({1: true, true: 1}[true]));

typefail(() => ((x: bool) => {})({1: 1}[1]));
typefail(() => ((x: bool) => {})({1: true, true: 1}[1]));
typefail(() => ((x: bool) => {})({1: true, true: 1}[true]));

typefail(() => ((x: num) => {})({1: true, true: 1}[1]));
typefail(() => ((x: num) => {})({1: true, true: 1}[true]));

// assignment.

typecheck(() => {
  let x = {1: true};
  x[1] = false;
});

typecheck(() => {
  let x = {1: true, true: 1};
  x[1] = false;
});

typecheck(() => {
  let x = {1: true, true: 1};
  x[true] = 1;
});

typecheck((z: num or bool) => {
  let x = {1: true, true: 1};
  x[z] = 1;
});

typefail(() => {
  let x = {1: true};
  x[true] = false;
});

typefail((z: num or bool or string) => {
  let x = {1: true, true: 1};
  x[z] = 1;
});

// annotation.

typecheck(() => {
  let x: {bool: bool} = {false: true};
});

typefail(() => {
  let x: {bool: bool} = {false: 1};
});

typefail(() => {
  let x: {bool: bool} = {1: false};
});

typecheck(() => {
  let x: {bool: bool or num} = {false: true};
});

typefail(() => {
 let x: {bool: bool or num} = {false: true, 1: false};
});

typecheck(() => {
  let x: {bool: bool or num} = {false: true, true: 1};
});

typecheck(() => {
  let x: {bool or num: bool} = {false: true};
});

typecheck(() => {
  let x: {bool or num: bool} = {false: true, 1: true};
});

typecheck(() => {
  let x: {bool or num: bool or num} = {false: true};
});

typecheck(() => {
  let x: {bool or num: bool or num} = {false: true, 1: true};
});

typecheck(() => {
  let x: {bool or num: bool or num} = {false: true, 1: true, true: 1};
});

typecheck(() => {
  let x: {bool or num: bool or num} = {false: true, 1: true, true: 1, 1: 1};
});

// annotation and assignment.

typecheck(() => {
  let x: {bool: bool} = Map();
  x[true] = false;
});

typefail(() => {
  let x: {bool: bool} = Map();
  x[true] = 1;
});

typefail(() => {
  let x: {bool: bool} = Map();
  x[1] = true;
});

typecheck(() => {
  let x: {bool: bool or num} = Map();
  x[true] = 1;
});

typefail(() => {
  let x: {bool: bool or num} = Map();
  x[1] = true;
});

typefail(() => {
  let x: {bool: bool or num} = Map();
  x["true"] = 1;
});

typefail(() => {
  let x: {bool: bool or num} = Map();
  x[true] = "1";
});

// comprehensions.

typecheck(() => ({1 | true}));
typecheck(() => ({1 | false}));

typefail(() => ({x | x in false}));
typefail(() => ({x | x in nil}));
typefail(() => ({x | x in 1}));

typecheck(() => ({x | x in {1,2}}));
typecheck(() => ({x | x in {1,2}, true}));
typecheck(() => ({x | false, x in {1,2}}));

typecheck(() => ({((z: num) => z)(x) | x in {1,2}}));
typefail(() => ({((z: string) => z)(x) | x in {1,2}}));

typecheck(() => {
  let f = (x: TSet(num)) => {};

  f({1 | true});
});

typefail(() => {
  let f = (x: TSet(num)) => {};

  f({"1" | true});
});

typecheck(() => {
  let f = (x: TSet(num)) => {};

  f({x | x in {1,2}});
});

typefail(() => {
  let f = (x: TSet(num)) => {};

  f({x | x in {"1","2"}});
});

typefail(() => {
  let f = (x: TSet(num)) => {};

  f({x | x in {"1",2}});
});

typecheck(() => {
  let f = (x: TSet(num)) => {};
  let z = {x | x in {1,2}};
  f({x | x in z});
});

typefail(() => {
  let f = (x: TSet(num)) => {};
  let z = {x | x in {"1","2"}};
  f({x | x in z});
});

typefail(() => {
  let f = (x: TSet(num)) => {};
  let z = {x | x in {"1",2}};
  f({x | x in z});
});

typecheck(() => {
  let f = (x: TSet(num)) => {};
  let g = x => 1;
  f({g(true) | true});
});

typefail(() => {
  let f = (x: TSet(num)) => {};
  let g = x => "1";
  f({g(true) | true});
});
