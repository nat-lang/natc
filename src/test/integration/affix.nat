
// infixation.

let infix +' = (a, b) => a + b;

assert(2 +' 2 == 4);

let infix +'';
+'' = (a, b) => a - b;

assert(2 +'' 2 == 0);

let infix g = >;

assert(1 g 1 == false);
assert(1 g 2 == false);
assert(2 g 1);

// applicable.
assert(+'(2,2) == 4);

// as argument.
assert((f => f(2,2))(+') == 4);

// embedded in arguments.
assert(+'(2 +' 2, 2 +' 2) == 8);

// variable operands.
let a = 2;
assert(a +' a == 4);

// object operands.
+' = (set1, set2) => set1.union(set2);

assert({1,2,3} +' {4,5,6} == {1,2,3,4,5,6});

// function operands.
let infix @ = (f, g) => (x) => f(g(x));

assert(((a => a + 1) @ (a => a + 1))(0) == 2);

// precedence.

let infix(6) plus = (a,b) => a + b;
let infix(7) times = (a,b) => a * b;

assert(5 plus 5 == 10);
assert(5 times 5 == 25);
assert(5 plus 5 times 2 == 15);

// default less than property access (PREC_CALL).
let infix @ = (x, y) => (x + y) / 2;
class A { f() => 1; }

assert(A().f() @ A().f() == 1);

// associativity.

let infixl left = (x,y) => [x y];
let infixr right = (x,y) => [x y];

let tree = 1 left 0 left 1;
assert(tree == [[1 0] 1]);

let tree = 1 right 0 right 1;
assert(tree == [1 [0 1]]);

let tree = 1 left 0 right 1;
assert(tree == [[1 0] 1]);

let tree = 1 right 0 left 1;
assert(tree == [1 [0 1]]);

// methods.

class A {
  init(v) => { this.v = v; }
  infix *(that) => A(this.v * that.v);
  __eq__(that) => this.v == that.v;
}

assert(A(1) * A(3) == A(3));

// prefixation.

let prefix f = x => x + 1;

assert(f f 1 == 3);

assert(f 1 + f 2 == 5);