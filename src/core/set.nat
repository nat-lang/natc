
class Set extends Object {
  init(*elements) => {
    this.map = Map();

    for (let i = 0; i < len(elements); i = i + 1) {
      this.map[elements[i]] = true;
    }
  }

  // The elements of the set are the keys of the underlying map.
  elements() => this.map.keys();

  // Calling a set is shorthand for the membership predicate,
  // so that the set behaves like its characteristic function.
  call(element) => element in this;

  __set__(key, value) => {
    this.map[key] = value;
    return this;
  }

  __get__(key) => this.map[key];
  __in__(key) => key in this.map;

  // The compiler uses this method when building set comprehensions.
  add(element) => this.__set__(element, true);

  __len__() => len(this.elements());

  // Iteration is over elements.
  __iter__() => iter(this.elements());

  // Hash the elements and sum them.
  hash() => {
    // begin with an offset, so that hash(1) != {1}.hash() != {{1}}.hash().
    let sum = 1;

    for (x in this.elements()) {
      sum = sum + hash(x);
    }

    return sum;
  }

  // Is [this] a subset of or equal to [that]?
  subsetEq(that) => {
    if (len(this) > len(that))
      return false;

    for (x in this) {
      if (!that(x))
        return false;
    }
  
    return true;
  }

  // Is [this] a proper subset of [that]?
  subset(that) => {
    if (len(this) == len(that))
      return false;

    return this.subsetEq(that);
  }

  // Is [this] a proper superset of [that]?
  supset(that) => that.subset(this);

  // Is [this] a superset of or equal to [that]?
  supsetEq(that) => that.subsetEq(this);

  // Is [this] equal to [that]?
  __eq__(that) => this.subsetEq(that) and that.subsetEq(this);

  union(that) => {
    let set = {};

    for (x in this)
      set.add(x);

    for (x in that)
      set.add(x);

    return set;
  }

  intersection(that) => {
    let set = {};

    for (x in this)
      if (x in that)
        set.add(x);
    
    return set;
  }

  // Relative complement of [that] in [this].
  complement(that) => {
    let set = {};

    for (x in this)
      if (!that(x))
        set.add(x);
    
    return set;
  }

  copy() => ({x | x in this});

  powerset() => {
    let powerset = {};

    for (element in this) {
      for (set in powerset) {
        let x = set.copy().add(element);
        powerset.add(x);
      }
      powerset.add({element});
    }

    powerset.add({});

    return powerset;
  }

  map(fn) => this.elements().map(fn);
  reduce(fn, acc) => this.elements().reduce(fn, acc);
  all(predicate) => this.elements().all(predicate);
  each(predicate) => this.all(predicate);
  some(predicate) => this.elements().some(predicate);

  str() => "Set(" + join([x.str() | x in this.elements()], ", ") + ")";
  pp() => {
    print this.str();
  }

  toSeq() => this.elements();
  fromSeq(seq: Sequential) => Set(..seq);
}

let bigUnion = (*sets) => sets.reduce(
  (big, set) => big.union(set),
  {}
);