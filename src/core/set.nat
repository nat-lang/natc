
class Set < Map {
  // A Set is a Map whose important elements are its keys.

  // Calling a set is shorthand for the membership predicate,
  // so that the set behaves like its characteristic function.
  call(element) => this[element] == true

  // The compiler calls this method when building a set comprehension.
  add(element) => this[element] = true

  __in__(element) => element in this.keys()

  // Iteration is over keys.
  __next__(idx) => {
    print "CHE CATSO";
    return next(this.keys(),idx);
  } 
  __curr__(idx) => curr(this.keys(), idx)

  // Hash the keys and sum them.
  __hash__() => {
    let sum = 0;

    for (x in this.keys())
      sum = sum + hash(x);

    return sum;
  }

  // Is [this] a subset of or equal to [other]?
  subsetEq(other) => {
    if (len(this) > len(other))
      return false;

    for (x in this.keys()) {
      if (!(x in other)) {
        return false;
      }
    }

    return true;
  }

  // Is [this] a proper subset of [other]?
  subset(other) => {
    if (len(this) == len(other))
      return false;

    return this.subsetEq(other);
  }

  // Is [this] a proper superset of [other]?
  supset(other) => other.subset(this)

  // Is [this] a superset of or equal to [other]?
  supsetEq(other) => other.subsetEq(this) 

  // Is [this] equal to [other]?
  __eq__(other) => this.subsetEq(other) and other.subsetEq(this)

  union(other) => {}
  intersection(x) => {}
  complement(x) => {}
}