class ASTNode extends Tree {}

class ASTStmt extends ASTNode {}

class ASTReturnStmt extends ASTStmt {}

class ASTExpr extends ASTNode {}

class ASTApp extends ASTExpr {}
class ASTBlock extends ASTExpr {}

class ASTClosure extends ASTExpr {
  init() => {
    this.signature = nil;

    super.init();
  }
}


class AST extends ASTNode {
  init() => {
    this.stack = [];
    super.init();
  }
  addStmt(stmt) => {
    let child = ASTStmt();
    child.addData(stmt);

    this.children.add(child);
  }

  opClosure() => {

  }

  opConstant(value) => this.push(value);

  opReturn() => {

    let value = this.stack.pop();

    let node = ASTReturnStmt();

    print "--------";
    print "a";
    node.setData(value);
    print "b";

    this.children.add(node);
  
    // (this.children.add . ASTReturnStmt().addData)(this.pop());
  }
  
  push(value) => this.stack.add(value);
  pop() => this.stack.pop();
}