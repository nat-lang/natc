class ASTNode extends Tree {
  opClosure() => ASTClosure();
  opLiteral(value) => ASTLiteral(value);
  opGetLocal(slot) => ASTLocal(slot);
  opGetGlobal(name) => ASTGlobal(name);
  opGetUpvalue(slot) => ASTUpvalue(slot);
  opCall(fn, *args) => ASTApp(fn, args);
}

class ASTStatement extends ASTNode {}
class ASTAssignment extends ASTStatement {
  init(var, value) => {
    this.children = [var, value];
  }
}
class ASTReturn extends ASTStatement {
  init(expr) => {
    this.children = [expr];
  }
}

class ASTExprStatement extends ASTStatement {
  init(expr) => {
    this.children = [expr];
  }
}

class ASTExpr extends ASTNode {}
class ASTLiteral extends ASTExpr {
  init(value) => {
    super.init();
    this.data = value;
  }
}

class ASTVar extends ASTExpr {
  init(id) => {
    super.init();
    this.data = id;
  }
}

class ASTLocal extends ASTVar {}
class ASTGlobal extends ASTVar {}
class ASTUpvalue extends ASTVar {}
class ASTArgumentSequence extends ASTExpr {
  init(arguments) => {
    super.init();
    this.children = arguments;
  }
}

class ASTApp extends ASTExpr {
  init(fn, arguments) => {
    super.init();
    this.children = [fn, ASTArgumentSequence(arguments)];
  }
}

class ASTSignature extends Object {
  init(parameters) => {
    this.parameters = parameters;
  }
}

class ASTClosure extends ASTExpr {
  init(signature) => {
    super.init();
    this.signature = signature;
    this.children = [];
  }

  opExprStatement(expr) => {
    let node = ASTExprStatement(expr);
    this.children.push(node);
  }

  opReturn(expr) => {
    let node = ASTReturn(expr);
    this.children.push(node);
  }
  opSetLocal(slot, value) => {
    let node = ASTAssignment(ASTLocal(slot), value);
    this.children.push(node);
  }
}