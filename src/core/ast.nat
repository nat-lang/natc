class NameSupply {
  init() => {
    this.next = 0;
  }
  fresh() => {
    this.next = this.next + 1;
    return this.next;
  }
}

class VarEnv {
  init(upvalues) => {
    this.locals = Map();
    this.upvalues = upvalues;
  }
}

class ASTNode extends Tree {
  init(*children) => {
    this.children = children;
  }

  // Give the tree's variables uuids. Identify upvalues
  // with the locals they close over. 
  uniquelyIdentifyVariables(uuids) => {
    let globals = Map();

    let rename = (node: ASTVariable, env: Map) => {
      if (!env[node.id])
        env[node.id] = uuids.fresh();
      node.uuid = env[node.id];
    };

    this.visit((node, varEnv) => {
      if (node is ASTClosure) {
        let closureEnv = VarEnv(varEnv.upvalues);

        for (param in node.signature().params) {
          rename(param, closureEnv.locals);
        }

        for (upvalue in node.upvalues) {
          if (!closureEnv.upvalues[upvalue.id]) {
            closureEnv.upvalues[upvalue.id] = varEnv.locals[upvalue.localId];
          }
        }

        return closureEnv;
      }

      if (node is ASTLocal)
        rename(node, varEnv.locals);

      if (node is ASTUpvalue)
        node.uuid = varEnv.upvalues[node.id];

      if (node is ASTGlobal)
        rename(node, globals);

      return varEnv;
    }, VarEnv(Map()));
  }
}

class ASTStatement extends ASTNode {}
class ASTExpr extends ASTNode {}

class ASTAssignment extends ASTStatement {}
class ASTPropertyAssignment extends ASTAssignment {}
class ASTLocalValueAssignment extends ASTAssignment {}
class ASTTypeAssignment extends ASTStatement {}
class ASTGlobalTypeAssignment extends ASTTypeAssignment {}
class ASTLocalTypeAssignment extends ASTTypeAssignment {}
class ASTReturn extends ASTStatement {}
class ASTImplicitReturn extends ASTReturn {}
class ASTExprStatement extends ASTStatement {}

class ASTLiteral extends ASTExpr {
  init(value) => {
    this.value = value;
    super.init();
  }
  resolve() => this.value;
}
class ASTNegation extends ASTExpr {}

class ASTSequence extends ASTExpr {
  resolve() => this.children.map(node => node.resolve());
}

class ASTPatternVariable extends ASTExpr {
  init(var) => {
    this.var = var;
    super.init();
  }
}

class ASTVariable extends ASTExpr {
  init(id) => {
    this.id = id;
    this.uuid = nil;
    super.init();
  }

  hash() => {
    if (!this.uuid) throw Error("Can't hash 'ASTVariable' without uuid.");

    return hash(this.uuid);
  }
}

class ASTLocal extends ASTVariable {}
class ASTGlobal extends ASTVariable {
  resolve() => globals()[this.id];
}
class ASTUpvalue extends ASTVariable {
  init(id, localId, upvalue) => {
    super.init(id);
    this.localId = localId;
    this.upvalue = upvalue;
  }
  resolve() => resolveUpvalue(this.upvalue);
}

class ASTParameter extends ASTVariable {
  init(id, name, type) => {
    super.init(id);
    this.name = name;
    this.type = type;
  }
}

class ASTArgumentSequence extends ASTExpr {
  resolve() => this.children.map(node => node.resolve());
}

class ASTApp extends ASTExprStatement {
  evaluate() => {
    let fn = this[0].resolve();
    let args = this[1].resolve();

    if (len(args) > 0)
      return fn(..args);
    return fn();
  }

  resolve() => this.evaluate();
}

class ASTInvocation extends ASTApp {
  evaluate() => {
    let obj = this[0].resolve();
    let key = this[1].resolve();
    let args = this[2].resolve();

    return obj[key](..args);
  }

  resolve() => this.evaluate();
}

class ASTPropertyAccess extends ASTExpr {
  init(obj, key) => {
    this.children = [obj, key];
  }
}

class ASTMembership extends ASTExpr {
  init(element, collection) => {
    this.children = [element, collection];
  }
}

class ASTSignature extends ASTNode {
  init(params) => {
    this.params = params;
  }
}

class ASTClosure extends ASTExpr {
  init(function, upvalues) => {
    this.function = function;
    this.upvalues = upvalues;
    this.children = [];
  }

  resolve() => this.function;

  sign() => {
    if (!this.function.signature) return ASTSignature([]);

    let ast = signature => {
      let params = [];

      for (let i = 0; i < len(signature.domain); i = i + 1) {
        let param = signature.domain[i];
        // the param's first argument tracks the local slot it refers
        // to, so offset +1 for the initial reserved stack slot.
        params.push(ASTParameter(i + 1, param.value, param.type));
      }

      return ASTSignature(params);
    };

    if (this.function.signature.arity == 0) {
      return ast(this.function.signature());
    }

    return ast(
      this.function.signature(
        ..[typeVar() | _ in range(0, this.function.signature.arity)]
      )
    );
  }

  signature() => {
    if (!this._signature)
      this._signature = this.sign();

    return this._signature;
  }

  // expressions.

  opLiteral(value) => ASTLiteral(value);
  opNot(value) => ASTNegation(value);
  opSequence(seq) => ASTSequence(..Sequential.fromRaw(seq));
  opGetGlobal(name) => ASTGlobal(name);
  opGetUpvalue(address, localSlot, upvalue) => ASTUpvalue(address, localSlot, upvalue);
  opGetProperty(obj, key) => ASTPropertyAccess(obj, ASTLiteral(key));
  opCall(fn, *args) => ASTApp(fn, ASTArgumentSequence(..args));
  opInvoke(obj, key, *args) => ASTInvocation(obj, key, ASTArgumentSequence(..args));
  opVariable(var) => ASTPatternVariable(var);
  opMember(element, collection) => ASTMembership(element, collection);

  // statements.

  opSignature(signature) => {
    this.function.signature = signature;
  }

  opExprStatement(expr) => {
    let node = ASTExprStatement(expr);
    this.children.push(node);
  }

  opSetLocalValue(local, value) => {
    let node = ASTLocalValueAssignment(local, value);
    this.children.push(node);
  }

  opSetLocalType(local, type) => {
    let node = ASTLocalTypeAssignment(local, type);
    this.children.push(node);
  }

  opSetProperty(obj, name, value) => {
    let literal = ASTLiteral(name);
    let assignment = ASTPropertyAssignment(obj, literal, value);
    this.children.push(assignment);
  }

  opReturn(expr) => {
    let node = ASTReturn(expr);
    this.children.push(node);
  }

  opImplicitReturn(expr) => {
    let node = ASTImplicitReturn(expr);
    this.children.push(node);
  }
}

class ASTMethod extends ASTExpr {
  init(klass, method, receiver, closure) => {
    this.klass = klass;
    this.method = method;
    this.receiver = receiver;
    this.children = [closure];
  }
}

class ASTOverload extends ASTExpr {
  init(overload, count, closures) => {
    this.overload = overload;
    this.count = count;
    this.children = closures;
  }
}

