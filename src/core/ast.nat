class NameSupply {
  init() => {
    this.next = 0;
  }
  fresh() => {
    this.next = this.next + 1;
    return this.next;
  }
}

class VarEnv {
  init(upvalues) => {
    this.locals = Map();
    this.upvalues = upvalues;
  }
}

class ASTNode extends Tree {
  init(*children) => {
    this.children = children;
  }

  str() => str(this.__class__);
  tex() => { throw NotImplemented(this.__class__, this.tex); }

  // Give the tree's variables uuids. Identify upvalues
  // with the locals they close over. 
  uniquelyIdentifyVariables(uuids) => {
    let globals = Map();

    let rename = (node: ASTVariable, env: Map) => {
      if (!env[node.id])
        env[node.id] = uuids.fresh();
      node.uuid = env[node.id];
    };

    this.visit((node, varEnv) => {
      if (node is ASTClosure) {
        let closureEnv = VarEnv(varEnv.upvalues);

        for (param in node.signature().params)
          rename(param, closureEnv.locals);

        for (v in node.upvalues.values()) {
          if (v is ASTExternalUpvalue) {
            rename(v, closureEnv.upvalues);
          } else if (v is ASTInternalUpvalue) {
            if (!closureEnv.upvalues[v.id])
              closureEnv.upvalues[v.id] = varEnv.locals[v.localId];
          } else {
            throw Error("Unexpected upvalue type: " + str(v));
          }
        }

        return closureEnv;
      }

      if (node is ASTLocal)
        rename(node, varEnv.locals);

      if (node is ASTUpvalue)
        node.uuid = varEnv.upvalues[node.id];

      if (node is ASTGlobal)
        rename(node, globals);

      return varEnv;
    }, VarEnv(Map()));
  }

  // expressions.

  opLiteral(value) => ASTLiteral(value);
  opNot(value) => ASTNegation(value);
  opEqual(left, right) => ASTEquality(left, right);
  opSequence(seq) => ASTSequence(..Sequence.fromRaw(seq));
  opGetGlobal(name) => ASTGlobal(name);
  opGetUpvalue(address) => this.upvalues[address];
  opGetProperty(obj, key) => ASTPropertyAccess(obj, ASTLiteral(key));
  opCall(fn, *args) => ASTApp(fn, ASTArgumentSequence(..args));
  opCallInfix(fn, left, right) => ASTAppInfix(fn, ASTArgumentSequence(left, right));
  opVariable(var) => ASTPatternVariable(var);
  opMember(element, collection) => ASTMembership(element, collection);

  // statements.

  opSignature(signature) => {
    this.function.signature = signature;
  }

  opExprStatement(expr) => {
    let node = ASTExprStatement(expr);
    this.children.push(node);
  }

  opSetGlobalValue(global, value) => {
    let node = ASTGlobalValueAssignment(global, value);
    this.children.push(node);
  }

  opSetGlobalType(global, type) => {
    let node = ASTGlobalTypeAssignment(global, type);
    this.children.push(node);
  }

  opSetLocalValue(local, value) => {
    let node = ASTLocalValueAssignment(local, value);
    this.children.push(node);
  }

  opSetLocalType(local, type) => {
    let node = ASTLocalTypeAssignment(local, type);
    this.children.push(node);
  }

  opSetProperty(obj, name, value) => {
    let literal = ASTLiteral(name);
    let assignment = ASTPropertyAssignment(obj, literal, value);
    this.children.push(assignment);
  }

  opReturn(expr) => {
    let node = ASTReturn(expr);
    this.children.push(node);
  }

  opImplicitReturn(expr) => {
    let node = ASTImplicitReturn(expr);
    this.children.push(node);
  }

  opConditional(condition, consequence) => {
    let node = ASTConditional(condition, consequence);
    this.children.push(node);
  }

  opIter(local, iterator, body) => {
    let node = ASTIterate(local, iterator, body);
    this.children.push(node);
  }

  opImport(module) => {
    let node = ASTImport(module);
    this.children.push(node);
  }

  opImportAs(module, alias) => {
    let node = ASTImportAs(ASTImport(module), ASTLiteral(alias));
    this.children.push(node);
  }
}

class ASTStatement extends ASTNode {}
class ASTExpr extends ASTNode {}

class ASTAssignment extends ASTStatement {}
class ASTPropertyAssignment extends ASTAssignment {}
class ASTTypeAssignment extends ASTStatement {}
class ASTLocalValueAssignment extends ASTAssignment {}
class ASTLocalTypeAssignment extends ASTTypeAssignment {}
class ASTGlobalValueAssignment extends ASTAssignment {}
class ASTGlobalTypeAssignment extends ASTTypeAssignment {}

class ASTReturn extends ASTStatement {
  tex() => join([n.tex() | n in this.children], " ");
}
class ASTImplicitReturn extends ASTReturn {
  tex() => "";
}
class ASTExprStatement extends ASTStatement {}

class ASTBlock extends ASTNode {
  init(enclosing: ASTClosure, *children) => {
    this.enclosing = enclosing;
    this.children = children;
  }
  opGetUpvalue(address) => this.enclosing.opGetUpvalue(address);
  tex() => join(this.children.map(x => x.tex()), "");
}

class ASTConditional extends ASTStatement {
  init(condition, consequence) => {
    this.children = [condition, consequence];
  }
  tex() => "if #{this[0].tex()} then #{this[1].tex()}";
}

class ASTIterate extends ASTStatement {
  init(local, iterator, body) => {
    this.children = [local, iterator, body];
  }
  tex() => "loop #{this[0].tex()} then #{this[1].tex()}";
}

class ASTLiteral extends ASTExpr {
  init(value) => {
    this.value = value;
    super.init();
  }
  str() => "ASTLiteral(#{str(this.value)})";
  tex() => this.str();
  resolve() => this.value;
  __eq__(that) => this.__class__ == that.__class__ and this.value == that.value;
}

class ASTNegation extends ASTExpr {
  tex() => "\neg #{this[0].tex()}";
}

class ASTEquality extends ASTExpr {
  init(left, right) => {
    this.children = [left, right];
  }
  tex() => "#{this[0].tex()} = #{this[1].tex()}";
}

class ASTSequence extends ASTExpr {
  resolve() => this.children.map(node => node.resolve());
}

class ASTPatternVariable extends ASTExpr {
  init(var) => {
    this.var = var;
    super.init();
  }
}

class ASTVariable extends ASTExpr {
  init(id) => {
    this.id = id;
    this.uuid = nil;
    super.init();
  }

  hash() => {
    if (!this.uuid) throw Error("Can't hash 'ASTVariable' without uuid.");

    return hash(this.uuid);
  }
}

class ASTLocal extends ASTVariable {
  init(id, name) => {
    this.name = name;
    super.init(id);
  }
  str() => "ASTLocal(#{str(this.id)})";
  tex() => this.name;
  __eq__(that) => this.name == that.name && super.__eq__(that);
}

class ASTGlobal extends ASTVariable {
  resolve() => globals()[this.id];
  tex() => str(this.id);
  str() => "ASTGlobal(#{this.id})";
}

class ASTUpvalue extends ASTVariable {
  init(id, localId, upvalue, name) => {
    super.init(id);
    this.name = name;
    this.localId = localId;
    this.upvalue = upvalue;
  }
}

class ASTExternalUpvalue extends ASTUpvalue {
  resolve() => resolveUpvalue(this.upvalue);
  tex() => {
    let value = this.resolve();
    if (vType(value) in [OFunction, OOverload]) {
      let ast <- value;
      return ast.tex();
    }
    return value;
  }
}

class ASTInternalUpvalue extends ASTUpvalue {
  resolve() => { throw Error("Not resolvable."); }
  tex() => this.name;
}

class ASTParameter extends ASTVariable {
  init(id, var, type) => {
    super.init(id);
    this.var = var;
    this.type = type;
  }
  tex() => "\lambda #{this.var.name}";
}

class ASTArgumentSequence extends ASTExpr {
  resolve() => this.children.map(node => node.resolve());
  tex() => join([arg.tex() | arg in this.children], ", ");
}

class ASTApp extends ASTExprStatement {
  evaluate() => {
    let fn = this[0].resolve();
    let args = this[1].resolve();
    if (len(args) > 0)
      return fn(..args);
    return fn();
  }

  resolve() => this.evaluate();
  resolveTex() => {
    if (this[0] is ASTGlobal) {
      let fn = this[0].resolve();
      if (fn.tex)
        return fn.tex(this[1]);
    }
  }

  tex() => this.resolveTex() || "#{this[0].tex()}(#{this[1].tex()})";
}

class ASTAppInfix extends ASTApp {
  tex() => this.resolveTex() || "#{this[1][0].tex()} #{this[0].tex()} #{this[1][1].tex()}";
}

class ASTPropertyAccess extends ASTExpr {
  init(obj, key) => {
    this.children = [obj, key];
  }
  resolve() => this[0].resolve()[this[1].resolve()];
  tex() => "#{this[0].tex()}.#{this[1].tex()}";
}

class ASTMembership extends ASTExpr {
  init(element, collection) => {
    this.children = [element, collection];
  }
  tex() => "#{this[0].tex()} \in #{this[1].tex()}";
}

class ASTSignature extends ASTNode {
  init(params) => {
    this.params = params;
  }
  tex() => join([p.tex() | p in this.params], "");
}

class ASTClosure extends ASTExpr {
  init(enclosing, function, upvalues) => {
    this.function = function;
    this.children = [];

    if (enclosing == nil)
      this.upvalues = Map();
    else
      this.upvalues = enclosing.upvalues.copy();

    for (val in upvalues) {
      if (!this.upvalues[val.id])
        this.upvalues[val.id] = val;
    }
  }

  // The first explicit return of a naked function.
  nakedBody() => this.children[0];
  tex() => {
    let body = this.nakedBody();

    let sep = ". ";
    if (body[0] is ASTClosure or body[0] is ASTQuantification)
      sep = "";

    return "#{this.signature().tex()}#{sep}#{body.tex()}";
  }

  resolve() => this.function;

  // Wrap [this] function's signature in ast.
  sign() => {
    if (!this.function.signature) return ASTSignature([]);

    let ast = signature => {
      let params = [];

      for (let i = 0; i < len(signature.domain); i = i + 1) {
        let param = signature.domain[i];
        // the param's first argument tracks the local slot it refers
        // to, so offset +1 for the initial reserved stack slot.
        params.push(ASTParameter(i + 1, param.value, param.type));
      }

      return ASTSignature(params);
    };

    if (this.function.signature.arity == 0) {
      return ast(this.function.signature());
    }

    return ast(
      this.function.signature(
        ..[typeVar() | _ in range(0, this.function.signature.arity)]
      )
    );
  }

  // Memoize the signature ast.
  signature() => {
    if (!this._signature)
      this._signature = this.sign();

    return this._signature;
  }
}

class ASTMethod extends ASTExpr {
  init(klass, method, receiver, closure) => {
    this.klass = klass;
    this.method = method;
    this.receiver = receiver;
    this.children = [closure];
  }
}

class ASTOverload extends ASTExpr {
  init(overload, count, closures) => {
    this.overload = overload;
    this.count = count;
    this.children = closures;
  }
  resolve() => this.overload;
  tex() => join([fn.tex() | fn in this.children], " \mid ");
}

class ASTQuantification extends ASTExpr {
  init(quantifier, restriction, body) => {
    this.quantifier = quantifier;
    this.restriction = restriction;
    this.body = body;

    this.children = [quantifier, restriction, body];
  }

  resolve() => this.quantifier.resolve()(this.restriction.resolve(), this.body.resolve());
  tex() => {
    let qFn = this.quantifier.resolve();
    if (!qFn.tex)
      throw Error("Quantifier '#{qFn.name}' defines no tex() function.");
    return qFn.tex(this.restriction, this.body);
  }
}

class ASTImport extends ASTStatement {
  init(module: Module) => {
    this.module = module;
    this.children = [];
  }
}

class ASTImportAs extends ASTStatement {
  init(module: Module, alias: ASTLiteral) => {
    this.module = module;
    this.alias = alias;
    this.children = [];
  }
}