let -1 = 1 - 2;

class Tree extends Object {
  init(data, children) => {
    this.data = data;
    this.children = children;
  }

  __eq__(that) => this.__class__ == that.__class__ &&
                  this.children == that.children;

  // Subscript access is to children.
  __get__(idx) => this.children[idx];

  __iter__() => {
    let nodes = this.depthFirst();
    return Iterator(nodes, 0, len(nodes));
  }

  depthFirst() => {
    let seq = [this];

    for (child in this.children)
      seq = seq.concat(child.depthFirst());

    return seq;
  }

  leaf() => len(this.children) == 0;
  unary() => len(this.children) == 1;
  binary() => len(this.children) == 2;

  leaves() => {
    if (this.leaf()) return [this.data];

    return [leaf | x in this.children, leaf in x.leaves()];
  }

  each(fn) => {
    for (x in this) fn(x);
  }

  // Map the data.
  dmap(fn) => Tree(fn(this.data), [x.dmap(fn) | x in this.children]);

  // Map the nodes.
  map(fn) => {
    this.children = [x.map(fn) | x in this.children];
    return fn(this);
  }

  reduce(fn, acc) => {
    for (x in this.depthFirst())
      acc = fn(acc, x.data);

    return acc;
  }

  visit(fn, acc) => {
    acc = fn(this, acc);

    // accumulate vertically, but not horizontally.
    for (child in this.children)
      child.visit(fn, acc);
  }

  find(predicate) => this.depthFirst().find(predicate);

  collect(predicate) => [node | node in this, predicate(node)];

  str() => str(this.__class__);

  ppAt(depth) => {
    let indent = join([" " | _ in range(0, depth)], "");
    print indent + this.str();
    this.children.map(x => x.ppAt(depth + 1));
  }
  pp() => this.ppAt(0);
}

// Functions for building tree literals during compilation.

// Childless tree.
let LeafNode = data => Tree(data, []);

// Dataless tree.
let Root = (*children) => Tree(nil, children);

// Convert [data] to a [Tree] if it's not already.
let Node = value => {
  if (value is Tree)
    return value;
  return LeafNode(value);
};
