
class Tree extends Object {
  init(data, children) => {
    this.data = data;
    this.children = children;
  }

  // Subscript access is to children.
  __get__(idx) => this.children[idx];

  __iter__() => {
    let nodes = this.depthFirst();
    return Iterator(nodes, 0, len(nodes));
  }

  depthFirst() => {
    let seq = [this];

    for (child in this.children)
      seq = seq.concat(child.depthFirst());

    return seq;
  }

  leaf() => len(this.children) == 0;
  unary() => len(this.children) == 1;
  binary() => len(this.children) == 2;

  leaves() => {
    if (this.leaf()) return [this.data];

    return [leaf | child in this.children, leaf in child.leaves()];
  }

  // Map the data.
  dmap(fn) => {
    let tree = Tree(fn(this.data), []);

    for (child in this.children)
      tree.children.push(child.dmap(fn));

    return tree;
  }

  // Map the nodes.
  map(fn) => {
    let tree = fn(this);

    for (child in this.children)
      tree.children.push(child.map(fn));

    return tree;
  }

  reduce(fn, acc) => {
    for (child in this.depthFirst())
      acc = fn(acc, child.data);

    return acc;
  }

  visit(fn, acc) => {
    acc = fn(this, acc);

    // accumulate vertically, but not horizontally.
    for (child in this.children)
      child.visit(fn, acc);
  }

  find(predicate) => {
    for (node in this) {
      if (predicate(node))
        return node;
    }
  }
}

// Functions for building tree literals during compilation.

// Childless tree.
let LeafNode = (data) => Tree(data, []);

// Dataless tree.
let Root = (*children) => Tree(nil, children);

// Convert [data] to a [Tree] if it's not already.
let Node = (value) => {
  if (value is Tree)
    return value;
  return LeafNode(value);
};
