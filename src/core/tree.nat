
class Tree extends Object {
  init(data, children) => {
    this.data = data;
    this.children = children;
  }

  // Subscript access is to children.
  __get__(idx) => this.children[idx];

  __iter__() => {
    let nodes = this.depthFirst();
    return Iterator(nodes, 0, len(nodes));
  }

  depthFirst() => {
    let seq = [this];

    for (child in this.children)
      seq = seq.concat(child.depthFirst());

    return seq;
  }

  isLeaf() => len(this.children) == 0;

  leaves() => {
    if (this.isLeaf()) return [this.data];

    let seq = [];

    for (x in this.children) {
      print x;
      for (y in x.leaves()) {
        print "pushing";
        print y;
        seq.push(y);
      }
    }

    return seq;

    return [leaf | child in this.children, leaf in child.leaves()];
  }

  map(fn) => {
    let tree = Tree(fn(this.data), []);

    for (child in this.children)
      tree.children.push(child.map(fn));

    return tree;
  }

  reduce(fn, acc) => {
    for (child in this.depthFirst())
      acc = fn(acc, child.data);

    return acc;
  }

  visit(fn, acc) => {
    acc = fn(this, acc);

    for (child in this.children)
      child.visit(fn, acc);
  }
}

// factory functions used by the compiler.
let treeFromData = (data) => Tree(data, []);
let treeFromChildren = (*children) => {
  for (let i = 0; i < len(children); i = i + 1) {
    if (type(children[i]) != Tree) {
      children[i] = treeFromData(children[i]);
    }
  }
  return Tree(nil, children);
};
