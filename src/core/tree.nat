let -1 = 1 - 2;

class Tree extends Object {
  init(data, children) => {
    this.data = data;
    this.children = children;
  }

  __eq__(that) => this.__class__ == that.__class__ &&
                  this.data == that.data &&
                  this.children == that.children;

  // Subscript access is to children.
  __get__(idx) => this.children[idx];

  __iter__() => {
    let nodes = this.depthFirst();
    return Iterator(nodes, 0, len(nodes));
  }

  depthFirst() => {
    let seq = [this];

    for (child in this.children)
      seq = seq.concat(child.depthFirst());

    return seq;
  }

  leaf() => len(this.children) == 0;
  unary() => len(this.children) == 1;
  binary() => len(this.children) == 2;

  leaves() => {
    if (this.leaf()) return [this.data];

    return [leaf | x in this.children, leaf in x.leaves()];
  }

  each(fn) => {
    for (x in this) fn(x);
  }

  // Map the data.
  dmap(fn) => Tree(fn(this.data), [x.dmap(fn) | x in this.children]);

  // Map the nodes.
  map(fn) => {
    this.children = [x.map(fn) | x in this.children];
    return fn(this);
  }

  reduce(fn, acc) => {
    for (x in this.depthFirst())
      acc = fn(acc, x.data);

    return acc;
  }

  visit(fn, acc) => {
    acc = fn(this, acc);

    // accumulate vertically, but not horizontally.
    for (child in this.children)
      child.visit(fn, acc);
  }

  // continuized map.
  kmap(fn) => this.children.map(
    x => fn(x, y => y.kmap(fn))
  );

  find(predicate) => this.depthFirst().find(predicate);

  collect(predicate) => [node | node in this, predicate(node)];

  str() => str(this.__class__);

  ppAt(depth, repr) => {
    repr(this, depth);
    this.children.map(x => x.ppAt(depth + 2, repr));
  }

  ppRepr(repr) => this.ppAt(0, repr);

  pp() => this.ppAt(0, (x, depth) => { print indent(depth) + x.str(); });

  texNode() => {
    if (this.leaf()) return "[#{this.data}]";
    let children = join(this.children.map(x => x.texNode()), " ");
    return "[#{this.data} #{children}]";
  }

  tex() => "\begin{forest} #{this.texNode()} \end{forest}";
  viz() => StandaloneTexDoc(this.tex());
}


// Functions for building tree literals during compilation.

// variadify the second argument.
let Interior = (data, *children) => Tree(data, children);

// Dataless tree.
let Root = (*children) => Tree(nil, children);

// Convert [data] to a [Tree] if it's not already.
let Node = value => {
  if (value is Tree)
    return value;
  return Tree(value, []);
};
