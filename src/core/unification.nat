
let unifyPair = (a: PatternElement, b: PatternElement) => {
  // if the pattern has no type annotation
  // then we just unify the param and the
  // scrutinee.
  if (a.type == undefined) {
    if (isVar(a.value) or isVar(b.value))
      return true;
    return a.value == b.value;
  }

  return TypeSystem.unify(b.type, a.type);
};

let unify = (function, scrutinee) => {
  let pattern = function.signature().domain;

  pattern = pattern.map((el: PatternElement) => {
    if (el.type != undefined)
      return PatternElement(el.value, TypeSystem.typify(el.type));
    return el; 
  });

  if (len(pattern) != len(scrutinee)) return false;

  let typedScrutinee = Pattern(..[
    PatternElement(x, TypeSystem.type(x)) | x in scrutinee
  ]);

  let result = zip(pattern, typedScrutinee).all(pair => unifyPair(..pair));

  return result;
};