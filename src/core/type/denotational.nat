
class CompositionError extends Error {}

class Domain extends Type {
  init(name, elements) => {
    this.name = name;
    this.elements = elements;

    TypeSystem.addDomain(this);
  }

  substitute(c) => this;
  str() => this.name;

  each(predicate) => this.elements.each(predicate);
  some(predicate) => this.elements.some(predicate);

  __iter__() => iter(this.elements);
  // functions are not hashable atm. guard against them.
  __in__(value) => hashable(value) and value in this.elements;
  __eq__(that) => this.elements == that.elements;
}

class DenotationalTypeState extends PolyTypeState {
  unify(constraint: Constraint) => {
    if (constraint is SubtypeConstraint) {
      if (constraint.left is Domain and constraint.right is Domain) {
        return constraint.left.elements.subsetEq(constraint.right.elements);
      }
    }

    return super.unify(constraint);
  }
}

class DenotationalTypeSystem extends PolyTypeSystem {
  init() => {
    // map from names to domains.
    this.domains = Map();
    // map from literals to their domain names.
    this.literals = Map();
  }

  addDomain(domain: Domain) => {
    this.domains[domain.name] = domain;

    for (element in domain) {
      this.literals[element] = domain.name;
    }
  }

  literalType(value) => {
    if (hashable(value) and value in this.literals)
      return this.domains[this.literals[value]];

    return super.literalType(value);
  }
}

DenotationalTypeSystem.TypeStateClass = DenotationalTypeState;
