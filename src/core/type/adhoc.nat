class TOverload extends Type {
  init(*cases) => {
    if (len(cases) == 0)
      throw TypeError("TOverload requires at least one case.");

    this.cases = cases.map(TypeSystem.typify);
  }

  unit(type) => {
    if (type is TOverload)
      return type;
    return TOverload(type);
  }

  lift(type) => {
    // if a function has a disjunctive domain we can map it
    // into an overload with a case for each disjunct.
    if (type is TFunction and type.domain is TSum)
      return TOverload(..[x -> type.range | x in type.domain]);

    return this.unit(type);
  }

  concat(that) => TOverload(..this.cases.concat(that.cases));

  __eq__(that) => that is TOverload && this.cases == that.cases;

  str() => "TOverload(#{join([x.str() | x in this.cases], ", ")})";
  tex() => join([case.tex() | case in this.cases], " \mid ");
  pp() => { print this.str(); }
}

let infix(7) & = (a, b) => TOverload.unit(a).concat(TOverload.unit(b));

class AdhocTypeState extends SubtypeState {
  constrain(node: ASTNode) => {
    if (node is ASTOverload) {
      let tCases = node.children.map(this.principal);
      return TOverload(..tCases);
    }

    return super.constrain(node);
  }

  _unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;

    if (constraint is SubtypeConstraint) {
      if (left is TVar or right is TVar)
        return super._unify(constraint);

      if (left is TOverload or right is TOverload) {
        left = TOverload.lift(left);
        right = TOverload.lift(right);

        // ∀x in right. ∃y in left. y <| x
        return right.cases.all(
          x => left.cases.some(
            y => {
              // we only want to propagate information for a
              // successful case, so typecheck in a local copy
              // of the state.
              let substate = this.copy();
              let unified = substate.unify(y <| x);

              if (unified)
                this.solution = substate.solution;

              return unified;
            }
          )
        );
      }
    }

    // left ~ right iff left <| right & right <| left
    if (left is TOverload or right is TOverload) {
      left = TOverload.lift(left);
      right = TOverload.lift(right);

      this.constraints.extend([
        // fixme: remove parens.
        (left <| right),
        (right <| left)
      ]);
      return this.solve();
    }

    return super._unify(constraint);
  }

  type(expr) => {
    if (vType(expr) == OOverload)
      return this.infer(expr);

    return super.type(expr);
  }
}

class AdhocTypeSystem extends SubtypeSystem {}

AdhocTypeSystem.TypeStateClass = AdhocTypeState;