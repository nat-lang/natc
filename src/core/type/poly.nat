
class TAbstract extends Type {
  init(fn) => {
    this.fn = fn;
    this.arity = fn.arity;
    this.variadic = fn.variadic;
  }

  call(*tVars) => {
    let concrete = this.fn(..tVars);
    return TypeSystem.typify(concrete);
  }

  instantiateWith(varCount) => {
    let tVars = [typeVar() | _ in range(0, varCount)];
    return this(..tVars);
  }

  instantiate() => this.instantiateWith(this.arity);

  pp() => { print this.str(); }

  prettyTVars() => {
    class PrettyTVar extends TVar { str() => this.id; }

    let tVars = [["u", "v", "w", "x", "y", "z"][i] | i in range(0, this.arity)];

    return [PrettyTVar(v) | v in tVars];
  }
  str() => {
    let tVars = this.prettyTVars();
    let type = TypeSystem.typify(this.fn(..tVars));
    return "âˆ€#{join([v.id | v in tVars], ",")}.#{type.str()}";
  }
  tex() => {
    let tVars = this.prettyTVars();
    let type = TypeSystem.typify(this.fn(..tVars));
    return "\forall #{join([v.id | v in tVars], ",")}. #{type.tex()}";
  }
}

class TGeneralization extends TAbstract {
  init(concrete) => {
    this.concrete = concrete;
    this.arity = len(concrete.fvs());
    this.variadic = false;
  }

  fvs() => this.concrete.fvs();

  fn(*args) => {
    // simulate the function with type substitution.
    let sub = Substitution(..zip(this.fvs().toSeq(), args));
    return this.concrete.apply(sub);
  }
}

class PolyTypeState extends AdhocTypeState {
  constrain(node: ASTNode) => {
    if (node is ASTComprehension) {
      let instance = node[0], body = node.body(), element = body[0];

      let tInstance = this.principal(instance),
          tElement = this.principal(element);

      this.pushConstraint(node, TCollection(tElement) <| tInstance);
      this.constrainFnRange(node);

      return tInstance;
    }

    if (node is ASTComprehensionBody)
      return this.principal(node[0]);

    if (node is ASTComprehensionIter) {
      let var = node[0], iterApp = node[1], body = node[2];

      // each ASTComprehensionIter has an application of the [iter]
      // function to a potential iterable as its second child. we don't
      // have everything necessary to type the [iter] function itself
      // right now, so in the meantime just type the potential iterable.
      let iter = iterApp[1][0];

      let tVar = this.principal(var);
      let tIter = this.principal(iter);

      this.pushConstraint(node, tIter <| TCollection(tVar));
      this.principal(body);

      return void;
    }
  
    if (node is ASTClosure) {
      let tParams = this.constrainFnDomain(node),
          tReturns = this.constrainFnRange(node);

      tParams = tParams.apply(this.solution);
      tReturns = tReturns.apply(this.solution);

      // push abstractions to the left edge.
      if (tReturns is TGeneralization)
        tReturns = tReturns.concrete;

      let type = tParams -> tReturns;

      if (type.hasFvs())
        return TGeneralization(type);

      return type;
    }

    if (node is ASTQuantification) {
      let tQ = this.principal(node.quantifier);
      let tR = this.principal(node.restriction);
      let tB = this.principal(node.body);
      let tV = typeVar();

      this.pushConstraint(node, tR ~ TSet(tV));
      this.pushConstraint(node, tQ <| TProduct(tR, tB) -> bool);
      this.pushConstraint(node, tB <| tV -> bool);

      return bool;
    }

    return super.constrain(node);
  }

  _unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;

    if (left is TAbstract) {
      if (left.variadic and right is ->) {
        if (right.domain is TProduct)
          left = left(..right.domain.elements);
        else
          left = left(right.domain);
      } else if (right is not TVar) {
        left = left.instantiate();
      }
    }

    if (right is TAbstract) {
      if (right.variadic and left is ->) {
        if (left.domain is TProduct)
          right = right(..left.domain.elements);
        else
          right = right(left.domain);
      } else if (left is not TVar) {
        right = right.instantiate();
      }
    }
    
    return super._unify(constraint.__class__(left, right));
  }

  // Abstract types need to be instantiated before
  // they're unified with a set of annotations.
  constrainAnnotation(annotation, type) => {
    if (type is TAbstract)
      type = type.instantiate();

    super.constrainAnnotation(annotation, type);
  }
}

class PolyTypeSystem extends AdhocTypeSystem {
  literalType(value) => {
    if (value == Tuple)
      return TAbstract((*types) => TProduct(..types) -> TProduct(..types));

    if (value == Set) {
      return TAbstract((*types) => {
        let element;

        if (len(types) == 1) {
          if (types[0] == unit)
            return unit -> TSet(typeVar());
          else
            return types[0] -> TSet(types[0]);
        }

        return TProduct(..types) -> TSet(TSum(..types));
      });
    }

    return super.literalType(value);
  }

  typify(value) => {
    if (vType(value) == OFunction)
      return TAbstract(value);

    return super.typify(value);
  }

  instantiate(func, *args) => {
    let state = this.newState();
  
    let tApp = typeVar();
    let tFunc = state.type(func);
    let tArgs = args.map(state.type);
  
    if (len(tArgs) == 0)
      tArgs = void;
    else if (len(tArgs) == 1)
      tArgs = tArgs[0];
    else
      tArgs = TProduct(..tArgs);

    state.constraints.push(tFunc <| tArgs -> tApp);
    state.solve();
  
    tApp = tApp.apply(state.solution);

    if (tApp.hasFvs())
      tApp = TGeneralization(tApp);

    return tApp;
  }
}

PolyTypeSystem.TypeStateClass = PolyTypeState;
