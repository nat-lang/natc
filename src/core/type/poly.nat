class TAbstract extends Type {
  init(fn, arity) => {
    this.fn = fn;
    this.arity = arity;
  }

  instantiate(nameSupply) => {
    let tVars = [];
    for (let i = 0; i < this.arity; i = i + 1)
      tVars.push(nameSupply());
    return this.fn(..tVars);
  }

  generalize(type: TFunction) => {
    let fvs = type.fvs();

    // simulate the function with type substitution.
    return TAbstract((*args) => {
      let s = Substitution(..zip(fvs.toSeq(), args));
      return type.apply(s);
    }, len(fvs));
  }

  fromClosure(closure: OClosure) => TAbstract(closure, closure.arity);

  str() => {
    let tVars = [
      ["u", "v", "w", "x", "y", "z"][i] | i in range(0, this.arity)
    ];
    class PrettyTVar extends TVar { str() => this.id; }
    let type = this.fn(..[PrettyTVar(v) | v in tVars]);
    return "(" + join([v | v in tVars], ",") + ") => " + type.str();
  }
  pp() => { print this.str(); }
}

class PolyTypeState extends SubtypeState {
  constrain(node: ASTNode) => {
    let type = super.constrain(node);

    if (node is ASTClosure and type.hasFvs()) {
      return TAbstract.generalize(type);
    }

    return type;
  }

  unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;

    if (left is TAbstract and !(right is TVar))
      left = left.instantiate(typeVar);
    
    if (right is TAbstract and !(left is TVar))
      right = right.instantiate(typeVar);
    
    return super.unify(Constraint(left, right));
  }
}

class PolyTypeSystem extends SubtypeSystem {
  typify(value) => {
    if (vType(value) == OClosure)
      return TAbstract.fromClosure(value);

    return super.typify(value);
  }
}

PolyTypeSystem.TypeStateClass = PolyTypeState;
