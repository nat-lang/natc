class TAbstract extends Type {
  init(fn, arity) => {
    this.fn = fn;
    this.arity = arity;
  }

  instantiate(nameSupply) => {
    let tVars = [];
    for (let i = 0; i < this.arity; i = i + 1)
      tVars.push(nameSupply());
    return this.fn(..tVars);
  }

  generalize(type: TFunction) => {
    let fvs = type.fvs();

    return TAbstract((*args) => {
      let s = Solution(..zip(fvs, args));
      type.apply(s);
      return type;
    }, len(fvs));
  }

  fromClosure(closure: OClosure) => TAbstract(closure, closure.arity);
}

class PolyTypeState extends SimpleTypeState {
  constrain(node: ASTNode) => {
    if (node is ASTAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.constrain(val);

      this.constraints.push(Constraint(tVar, tVal));

      if (tVal is TAbstract)
        this.typeEnv[var] = tVal;

      return void;
    }
  
    if (node is ASTLocalTypeAssignment) {
      let var = node[0];
      let val = node[1];

      if (var in this.typeEnv)
        throw TypeError("Variable already has a type annotation.");

      let type = val.resolve();

      if (vType(type) == OClosure)
        type = TAbstract.fromClosure(type);

      this.typeEnv[var] = type;

      return void;
    }

    let type = super.constrain(node);

    if (node is ASTClosure and type.hasFvs()) {
      return TAbstract.generalize(type);
    }
  
    return type;
  }

  transform(node: ASTNode) => {
    node = super.transform(node);

    this.typeEnv.each(entry => {
      let var = entry[0];
      let type = entry[1];

      if (vType(type) == OClosure) {
        this.typeEnv[var] = TAbstract.fromClosure(type);
      }
    });

    return node;
  }

  unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;

    if (left is TAbstract)
      left = left.instantiate(typeVar);
    
    if (right is TAbstract)
      right = right.instantiate(typeVar);
    
    return super.unify(Constraint(left, right));
  }
}

class PolyTypeSystem extends SimpleTypeSystem {}

PolyTypeSystem.TypeStateClass = PolyTypeState;

