
class TSum extends Type {
  init(*types) => {
    let typified = types.map(TypeSystem.typify);
    this.disjuncts = Set.fromSeq(typified);
  }

  infix &(that: TSum) => TSum(
    ..(this.disjuncts & that.disjuncts).elements()
  );

  substitute(c: Constraint) => {
    let sum = TSum(..this.disjuncts.map(x => x.substitute(c)));
    if (len(sum) == 1) return sum.lower();
    return sum;
  }

  elements() => this.disjuncts.elements();
  subtypeOf(that: TSum) => this.disjuncts.subsetEq(that.disjuncts);
  lift(type) => {
    if (type is TSum) return type;
    return TSum(type);
  }
  lower() => this.disjuncts.elements()[0];

  fvs() => union(..[x.fvs() | x in this]);
  join(sep) => join(this.elements().map(x => x.str()), sep);
  str() => "TSum(" + this.join(", ") + ")";
  tex() => this.join(" \mid ");
  pp() => { print this.str(); }
  hash() => this.disjuncts.hash();
  
  __eq__(that) => this.disjuncts == that.disjuncts;
  __in__(element) => element in this.disjuncts;
  __iter__() => iter(this.disjuncts);
  __len__() => len(this.disjuncts);
}

let infix(9) % = (a, b) => TSum.lift(a) & TSum.lift(b);

class SubtypeConstraint extends Constraint {
  str() => this.left.str() + " <| " + this.right.str();
}

let infix(6) <| = SubtypeConstraint;

class SubtypeState extends SimpleTypeState {
  constrain(node: ASTNode) => {
    if (node is ASTApp) {
      let func = node[0];
      let args = node[1];

      let tFunc = this.constrain(func);
      let tArgs = this.constrain(args);
      let tApp = typeVar();
      
      this.constraints.push(tFunc <| tArgs -> tApp);
      
      return tApp;
    }

    if (node is ASTMembership) {
      let element = node[0];
      let collection = node[1];

      let tElement = this.principal(element);
      let tCollection =  this.principal(collection);

      this.constraints.push(tCollection <| TCollection(tElement));

      if (tCollection is TInstance && "__in__" in tCollection.klass) {
        let tIn = this.type(tCollection.klass.__in__);

        this.constraints.push(tIn <| tElement -> bool);
      }

      return bool;
    }

    if (node is ASTNegation) {
      let tArg = this.principal(node[0]);
      this.constraints.push(tArg <| (bool % void % undef));
      return bool;
    }

    if (node is ASTLocalTypeAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.system.typify(val.resolve());

      // value must be subtype of its annotation.
      this.constraints.push(tVar <| tVal);

      return void;
    }

    if (node is ASTConditional || node is ASTComprehensionPred) {
      let condition = node[0],
          consequent = node[1];
      
      let tCondition = this.principal(condition),
          tConsequent = this.principal(consequent);

      this.constraints.push(tCondition <| bool);
      return void;
    }

    if (node is ASTComprehensionBody)
      return this.constrain(node[0]);

    if (node is ASTComprehensionIter) {
      let var = node[0],
          iter = node[1], // ASTApp
          args = iter[1], // ASTArgumentSequence
          obj = args[0];
  
      let tVar = this.principal(var);
      let tObj = this.principal(obj);

      this.constraints.push(tObj <| TCollection(tVar));
      return void;
    }

    return super.constrain(node);
  }

  _unify(constraint: Constraint) => {
    if (constraint is not SubtypeConstraint)
      return super._unify(constraint);

    let left = constraint.left,
        right = constraint.right;
    
    if (left is TVar or right is TVar)
      return super._unify(constraint);

    if (left is TCollection and right is TCollection) {
      if (len(left) == len(right)) {
        this.constraints.extend([
          x[0] <| x[1] | x in zip(left.elements, right.elements)
        ]);
        return this.solve();
      }

      return false;
    }

    if (left is TInstance and right is TInstance)
      return isSubclass(left.klass, right.klass);

    // a -> b < c -> d iff a > c and b < d.
    if (left is TFunction and right is TFunction) {
      this.constraints.extend([
      // fixme: the compiler fails when these are unparenthesized.
        (right.domain <| left.domain),
        (left.range <| right.range)
      ]);

      return this.solve();
    }

    let a = TSum.lift(left);
    let b = TSum.lift(right);

    return a.subtypeOf(b);
  }

  // Value must be subtype of its annotation.
  constrainAnnotation(annotation, type) => this.constraints.push(
    type <| annotation
  );
}

class SubtypeSystem extends SimpleTypeSystem {
  _typecheck(expr, debug) => {
    let node <- expr;
    let state = this.TypeStateClass(this, debug);

    node = state.transform(node);

    state.constrain(node);
    state.solve();

    return state;
  }
}

SubtypeSystem.ConstraintClass = SubtypeConstraint;
SubtypeSystem.TypeStateClass = SubtypeState;
