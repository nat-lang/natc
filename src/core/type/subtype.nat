
class TSum extends Type {
  init(*types) => {
    let typified = types.map(TypeSystem.typify);
    this.disjuncts = Set.fromSeq(typified);
  }

  union(that: TSum) => TSum(
    ..this.disjuncts.union(that.disjuncts).elements()
  );

  elements() => this.disjuncts.elements();
  subtypeOf(that: TSum) => this.disjuncts.subsetEq(that.disjuncts);
  lift(type) => {
    if (type is TSum) return type;
    return TSum(type);
  }

  fvs() => bigUnion(..[x.fvs() | x in this]);
  str() => "TSum(" + join(this.elements().map(x => x.str()), ", ") + ")";
  pp() => { print this.str(); }
  hash() => this.disjuncts.hash();
  
  __eq__(that) => this.disjuncts == that.disjuncts;
  __in__(element) => element in this.disjuncts;
  __iter__() => iter(this.disjuncts);
}

let infix(9) || = (a, b) => TSum.lift(a).union(TSum.lift(b));

class SubtypeConstraint extends Constraint {
  str() => this.left.str() + " < " + this.right.str();
}

class SubtypeState extends SimpleTypeState {
  constrain(node: ASTNode) => {
    if (node is ASTApp) {
      let func = node[0];
      let args = node[1];

      let tFunc = this.constrain(func);
      let tArgs = this.constrain(args);
      let tApp = typeVar();
      
      this.constraints.push(
        SubtypeConstraint(tFunc, tArgs -> tApp)
      );
      
      return tApp;
    }

    if (node is ASTMembership) {
      let element = node[0];
      let collection = node[1];

      let tElement = this.principal(element);
      let tCollection =  this.principal(collection);

      this.constraints.push(
        SubtypeConstraint(tCollection, TInstance(Base))
      );

      // this will become a predication against the type
      // rather than the value once TInstance is a record.
      if (tCollection is TInstance and "__in__" in tCollection.klass) {
        let tIn = this.type(tCollection.klass.__in__);

        this.constraints.push(
          SubtypeConstraint(tIn, tElement -> bool)
        );
      }

      return bool;
    }

    return super.constrain(node);
  }

  unify(constraint: Constraint) => {
    if (constraint is SubtypeConstraint) {
      let left = constraint.left,
          right = constraint.right;
    
      if (left is TVar or right is TVar) {
        return super.unify(constraint);

      // a -> b < c -> d iff a > c and b < d.
      } else if (left is TFunction and right is TFunction) {
        this.constraints.extend([
          SubtypeConstraint(right.domain, left.domain),
          SubtypeConstraint(left.range, right.range)
        ]);

        return this.solve();

      } else if (left is TProduct and right is TProduct) {
        if (len(left) == len(right)) {
          this.constraints.extend([
            SubtypeConstraint(..x) | x in zip(left.elements, right.elements)
          ]);
          return this.solve();
        }

        return false;

      } else if (left is TInstance and right is TInstance) {
        return isSubclass(left.klass, right.klass);
      } else {
        let a = TSum.lift(left);
        let b = TSum.lift(right);

        return a.subtypeOf(b);
      }
    }

    return super.unify(constraint);
  }
}

class SubtypeSystem extends SimpleTypeSystem {}

SubtypeSystem.ConstraintClass = SubtypeConstraint;
SubtypeSystem.TypeStateClass = SubtypeState;
