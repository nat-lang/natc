
// This module bridges the object language and the
// vm's type system.

class TypeError extends Error {}

class CType extends Base {}

class CUnit extends CType {}
class CBool extends CType {}
class CNil extends CType {}
class CNumber extends CType {}
class CObject extends CType {}
class CUndef extends CType {}

class OVariable extends CObject {}
class OClass extends CObject {}
class OInstance extends CObject {}
class OString extends CObject {}
class ONative extends CObject {}
class OFunction extends CObject {}
class OBoundFunction extends CObject {}
class OOverload extends CObject {}
class OSequence extends CObject {}

let isSubclass = (a, b) => {
  if (vmType(a) != OClass or vmType(b) != OClass) 
    return false;
  
  let klass = a;

  while (klass != nil) {
    if (klass == b) return true;
    klass = klass.__superclass__;
  }

  return false;
};

let lca = (a, b) => {
  let k = a;

  while (k) {
    if (isSubclass(b, k))
      return k;
    k = k.__superclass__;
  }
};

let isVar = x => vmType(x) == OVariable;

// Is [a] an instance of [b]?
let infix(5) is = (a, b) => {
  let aType = vmType(a);
  let bType = vmType(b);

  if (aType != OInstance or bType != OClass)
    return false;

  return isSubclass(a.__class__, b);
};

class PatternElement extends Base {
  init(value, type) => {
    this.value = value;
    this.type = type;
  }
}

class Pattern extends Base {
  init(*elements) => {
    this.elements = elements;
  }
  map(fn) => Pattern(..this.elements.map(fn));
  __get__(idx) => this.elements[idx];
  __len__() => len(this.elements);
  __iter__() => iter(this.elements);
}

class Signature extends Base {
  init(domain, range) => {
    this.domain = domain;
    this.range = range;
  }
}
