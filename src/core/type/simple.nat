
class Constraint {
  init(left, right) => {
    this.left = left;
    this.right = right;
  }

  str() => this.left.str() + " ~ " + this.right.str();
}

class AppConstraint extends Constraint {}

class Substitution extends Map {
  entries() => super.entries().map(e => Constraint(..e));

  update(var: TVar, type: Type) => {
    this[var] = type;

    for (sub in this) {
      this[sub.left] = sub.right.substitute(Constraint(var, type));
    }
  }

  apply(c: Constraint) => {
    let c' = c.__class__(c.left, c.right);

    for (sub in this) {
      c'.left = c'.left.substitute(sub);
      c'.right = c'.right.substitute(sub);
    }

    return c';
  }

  pp() => {
    for (sub in this) { sub.pp(); print ""; }
  }

  copy() => this.__class__(..super.entries());
}

class Type extends Base {
  substitute(c) => {
    if (this == c.left)
      return c.right;
    return this;
  }

  fvs() => Set();
  hasFvs() => len(this.fvs()) > 0;
  hash() => hash(this.str());
  apply(solution) => solution.entries().reduce(
    (type, sub) => type.substitute(sub),
    this
  );

  str() => str(this);
  pp() => { print this.str(); }
  map(fn) => fn(this);
}

class TFunction extends Type {
  init(domain, range) => {
    this.domain = domain;
    this.range = range;
  }

  __eq__(that) => this.domain == that.domain and this.range == that.range;

  str() => {
    let domain = this.domain.str(), range = this.range.str();

    if (this.domain is TFunction)
      domain = "(" + domain + ")";
    if (this.range is TFunction)
      range = "(" + range + ")";
    
    return domain + " -> " + range;
  }
  fvs() => this.domain.fvs().union(this.range.fvs());

  substitute(sub) => TFunction(
    this.domain.substitute(sub),
    this.range.substitute(sub)
  );

  map(fn) => TFunction(this.domain.map(fn), this.range.map(fn));
}

class TVar extends Type {
  init(id) => {
    this.id = id;
  }
  __eq__(that) => this.id == that.id;
  hash() => hash(this.id);
  fvs() => Set(this);
  str() => "<var " + str(this.id) + ">";
}

class TypeVarSupply extends NameSupply {
  fresh() => TVar(super.fresh());
}

let globalTypeVarSupply = TypeVarSupply();
let typeVar = globalTypeVarSupply.fresh;

class TUnit extends Type {
  str() => "()";
}
class TUndefined extends Type {
  str() => "undef";
}
class TVoid extends Type {
  str() => "void";
}
class TBoolean extends Type {
  str() => "bool";
}
class TNumber extends Type {
  str() => "num";
}
class TString extends Type {
  str() => "string";
}

class TProduct extends Type {
  init(elements) => {
    this.elements = elements;
  }

  fvs() => bigUnion(..[x.fvs() | x in this.elements]);
  str() => "(" + join(this.elements.map(x => x.str()), ", ") + ")";
  hash() => this.elements.hash();
  substitute(c: Constraint) => {
    return TProduct(this.elements.map(x => x.substitute(c)));
  }

  __iter__() => iter(this.elements);
  __eq__(that) => this.elements == that.elements;
  __len__() => len(this.elements);

   map(fn) => TProduct(this.elements.map(fn));
}

class TOverload extends Type {
  init(functions) => {
    this.functions = functions;
  }
  map(fn) => TOverload(this.functions.map(fn));
}

class TClass extends Type {
  init(klass) => {
    this.klass = klass;
  }
  str() => "TClass(" + str(this.klass) + ")";
  substitute(s) => this;
  hash() => hash(this.klass);
  __eq__(that) => this.klass == that.klass;
}

class TInstance extends TClass {
  str() => "TInstance(" + str(this.klass) + ")";
}

let unit = TUnit();
let undef = TUndefined();
let void = TVoid();
let bool = TBoolean();
let num = TNumber();
let string = TString();
let infix(8) -> = TFunction;

class SimpleTypeSystem {
  // Map vm types to object language types.
  literalType(value) => {
    let type = vType(value);

    if (type == CUnit) return unit;
    if (type == CUndef) return undef;
    if (type == CNil) return void;
    if (type == CBool) return bool;
    if (type == CNumber) return num;
    if (type == OString) return string; 
    if (type == OInstance) {
      // this is a hack until classes are mapped
      // systematically to type constructors.
      if (value is Tuple)
        return TProduct(value.map(this.type));
      return TInstance(value.__class__);
    }
    // if it's a native we punt.
    if (type == ONative) return typeVar() -> typeVar();
    if (type == OFunction) return nil;
    if (type == OBoundFunction) return nil;
    if (type == OOverload) return nil;
    // we'll treat the type of a class as synonymous with
    // its initializer for now; this'll need to be revised
    // when we type property access.
    if (type == OClass) {
      let domain = unit;

      if (value.init != nil) {
        let tInit = this.type(value.init);
        domain = tInit.domain;
      }

      return domain -> TInstance(value);
    }

    throw TypeError("Don't know the literal type of " + str(value) + ".");
  }

  // Classes, sequences, units, and undefined values do double
  // duty as types during annotation. Here we map them into
  // unambiguous type objects. 
  typify(value) => {
    if (value == ())
      return unit;
    if (value == undefined)
      return typeVar();
    if (value is Tuple)
      return TProduct(value.map(this.typify));
    if (vType(value) == OSequence)
      return this.typify(Sequence.fromRaw(value));
    if (vType(value) == OClass)
      return TInstance(value);
    if (value is TFunction)
      return this.typify(value.domain) -> this.typify(value.range);

    return value;
  }

  // Assemble and return the [TypeState] produced
  // by [expr].
  _typecheck(expr, debug) => {
    let node <- expr;
    let state = this.TypeStateClass(this, debug);

    node = state.transform(node);

    state.constrain(node);
    state.solve();

    return state;
  }

  typecheck(expr) => this._typecheck(expr, false);

  newState() => this.TypeStateClass(this, false);

  type(expr) => {
    let state = this.newState();
  
    return state.type(expr);
  }

  unify(a,b) => this.newState().unify(
    this.ConstraintClass(a,b)
  );
}

class SimpleTypeState {
  init(system: SimpleTypeSystem, debug: bool) => {
    this.system = system;
    // map from ast variables to types.
    this.typeEnv = Map();
    // constraint stack.
    this.constraints = [];
    this.insoluble = [];
    // most general set of unifiers.
    this.solution = Substitution();
    // print debugging information?
    this.debug = debug;
    this.uuids = NameSupply();
  }

  copy() => {
    let state = this.__class__(this.system, this.debug);

    state.typeEnv = this.typeEnv.copy();
    state.constraints = this.constraints.copy();
    state.insoluble = this.insoluble.copy();
    state.solution = this.solution.copy();
    state.uuids = this.uuids;

    return state;
  }

  // Look up the node in the [typeEnv]. If there's an entry,
  // apply the current solution. Otherwise mint a fresh type
  // var.
  lookup(node: ASTVariable) => {
    if (this.typeEnv[node])
      return this.typeEnv[node].apply(this.solution);

    this.typeEnv[node] = typeVar();
    return this.typeEnv[node];
  }

  // Look up the type of a variable by its id
  // and apply the current solution to it.
  find(id) => {
    let type = this.typeEnv.find(n => n.id == id);

    if (type)
      return type.apply(this.solution);
  }

  // Give [node]'s variables unique identifiers. Map the
  // global variables to their annotations if they exist.
  transform(node: ASTNode) => {
    node.uniquelyIdentifyVariables(this.uuids);

    return node;
  } 

  constrain(node: ASTNode) => {
    if (node is ASTMethod)
      return this.constrain(node[0]);

    if (node is ASTClosure) {
      let parameters = node.signature().params;
      // map the parameter annotations into types.
      let paramTypes = parameters.map(p => {
        let type = p.type;
        
        // it's not an ASTNode when we're pattern matching.
        if (type is ASTNode)
          type = type.resolve();

        return this.system.typify(type);
      });

      // since the params and their types are keyed by uuid,
      // we can just update the global type env when checking
      // the body of a function.
      this.typeEnv.extend(Map(..zip(parameters, paramTypes)));

      // track the types of the return values as we check the body.
      let returnTypes = node.children.reduce(
        (types, node) => {
          let type = this.principal(node);

          if (node is ASTReturn)
            types.push(type);

          return types;
        }, []
      );

      // now build the type of the function.
      let tParams, tReturns;

      if (node.function.arity == 0) {
        tParams = unit;
      } else if (node.function.arity == 1) {
        tParams = paramTypes[0];
      } else {
        tParams = TProduct(paramTypes);
      }

      // there's always an implicit return. for now, if there are
      // explicit returns as well, we'll just ignore the implicit
      // one. once we have ast nodes for conditionals we can be
      // more discriminating.
      let tImplicitReturn = returnTypes.pop();

      if (len(returnTypes) == 0) {
        tReturns = tImplicitReturn;
      } else if (len(returnTypes) == 1) {
        tReturns = returnTypes[0];
      } else {
        tReturns = TProduct(returnTypes);
      }

      return (tParams -> tReturns).apply(this.solution);
    }

    if (node is ASTLiteral)
      return this.system.literalType(node.value);
    
    if (node is ASTNegation)
      return this.principal(node[0]);

    if (node is ASTGlobal) {
      let value = node.resolve();
      return this.type(value);
    }

    // the ast closes over a variable out of its scope.
    // resolve it and type its value.
    if (node is ASTUpvalue and node.uuid == nil) {
      let value = node.resolve();
      return this.type(value);
    }

    if (node is ASTVariable)
      return this.lookup(node);
    
    if (node is ASTPropertyAccess)
      return typeVar();

    if (node is ASTArgumentSequence) {
      let tArgs = node.children.map(this.constrain);

      if (len(tArgs) == 0)
        return unit;
      else if (len(tArgs) == 1)
        return tArgs[0];
      else
        return TProduct(tArgs);
    }

    if (node is ASTApp) {
      let func = node[0];
      let args = node[1];

      let tFunc = this.principal(func);
      let tArgs = this.principal(args);
      let tApp = typeVar();

      this.constraints.push(Constraint(tFunc, tArgs -> tApp));

      return tApp;
    }

    if (node is ASTLocalTypeAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.system.typify(val.resolve());

      this.constraints.push(Constraint(tVar, tVal));

      return void;
    }

    if (node is ASTAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.principal(val);

      this.constraints.push(Constraint(tVar, tVal));

      // this should eventually respect a possibly user
      // defined __set__ method that returns something.
      return void;
    }

    if (node is ASTExprStatement)
      return this.principal(node[0]);

    if (node is ASTReturn) 
      return this.principal(node[0]);

    throw TypeError("Unexpected syntax: " + str(node) + ".");
  }

  // The occurs check.
  occurs(var: TVar, type: Type) => !(type is TVar) and var in type.fvs();

  unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;
    
    // unit only unifies with itself.
    if (left == unit or right == unit)
      return left == right;

    // apply (type variable, type) unifiers to the solution.
    if (left is TVar) {
      if (this.occurs(left, right))
        return false;

      this.solution.update(left, right);
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    }
    
    if (right is TVar) {
      if (this.occurs(right, left))
        return false;

      this.solution.update(right, left);
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    }
    
    // function constraints become domain/domain range/range constraints.
    if (left is TFunction and right is TFunction) {
      this.constraints.extend([
        Constraint(left.domain, right.domain),
        Constraint(left.range, right.range)
      ]);

      return this.solve();
    }

    // product types of equal length become pairwise sequences of constraints.
    if (left is TProduct and right is TProduct) {
      if (len(left) == len(right)) {

        this.constraints.extend(
          zip(left.elements, right.elements).map((x) => Constraint(..x))
        );

        return this.solve();
      } else {
        return false;
      }
    }

    return left == right;
  }

  // Solve the state's [constraints].
  solve() => {
    let i = 0;
    while (len(this.constraints) > 0) {
      if (this.debug) {
        print "----------- STEP " + str(i) + " -----------";
        this.ppConstraints();
        print "------------------------------";
      }

      let constraint = this.constraints.pop();
      let unifiable = this.unify(constraint);

      if (!unifiable)
        this.insoluble.push(constraint);

      i = i + 1;
    }

    if (this.debug and len(this.solution) > 0) {
      print "--------- SOLUTION -----------";
      this.ppSolution();
      print "------------------------------";
    }

    return this.solved();
  }

  principal(node: ASTNode) => {
    let type = this.constrain(node);

    if (this.solve())
      return type.apply(this.solution);

    return type;
  }

  infer(expr) => {
    let node <- expr;

    node = this.transform(node);
    
    return this.principal(node);
  }

  unifyAnnotations(expr, type) => {
    let tAnnotations = annotations(expr);

    if (len(tAnnotations) > 0) {
      for (a in tAnnotations) {
        this.constraints.push(
          Constraint(this.system.typify(a), type)
        );
      }

      if (this.solve())
        return type.apply(this.solution);
    }

    return type;
  }

  // Calculate the type of [expr], inferring it if necessary.
  type(expr) => {
    let type = this.system.literalType(expr);
    if (type) return type;

    type = this.infer(expr);

    return this.unifyAnnotations(expr, type);
  }

  solved() => len(this.constraints) == 0 and len(this.insoluble) == 0;
  success() => this.solved();
  failure() => !this.solved();

  ppConstraints() => {
    for (let i = 0; i < len(this.constraints); i = i + 1) {
      print str(i) + ") " + this.constraints[i].str();
    }
  }
  ppInsoluble() => {
    for (let i = 0; i < len(this.insoluble); i = i + 1) {
      print str(i) + ") " + this.insoluble[i].str();
    }
  }
  ppSolution() => {
    for (c in this.solution)
      print c.left.str() + " = " + c.right.str();
  }
}

SimpleTypeSystem.ConstraintClass = Constraint;
SimpleTypeSystem.TypeStateClass = SimpleTypeState;
