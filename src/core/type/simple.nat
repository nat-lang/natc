
class Constraint {
  init(left, right) => {
    this.left = left;
    this.right = right;
  }

  pp() => {
    this.left.pp();
    print "x";
    this.right.pp();
  }
}

class AppConstraint extends Constraint {}

class Solution extends Map {
  entries() => super.entries().map((e) => Constraint(..e));

  apply(c: Constraint) => {
    for (sub in this) {
      c.left = c.left.substitute(sub);
      c.right = c.right.substitute(sub);
    }

    return c;
  }
}

class Type {
  pp() => {
    print this;
  }

  substitute(c: Constraint) => {
    if (this == c.left)
      return c.right;
    return this;
  }

  str() => {
    throw NotImplemented("Type classes must implement 'str' individually.");
  }

  hash() => hash(this.str());
}

class TVar extends Type {
  init(name) => {
    this.name = name;
  }
  __eq__(other) => this.name == other.name;
  str() => str(this.name);
}

class TUnit extends Type {
  str() => "()";
}
class TVoid extends Type {
  str() => "void";
}
class TBoolean extends Type {
  str() => "bool";
}
class TNumber extends Type {
  str() => "num";
}
class TString extends Type {
  str() => "string";
}

// The only type constructors in the system are TProduct, TFunction, and TSum.
// They transform sequential and unit values into their corresponding types
// (TProduct and TUnit), as their initializers are a convenient place to
// control entry into the system. However, it's an inelegant solution, as 
// we have to perform the same transformation for non-recursively occuring
// sequentials and units in a different place. We'd do better to do it all
// in a single pass over the ast, or better yet in a callback to the
// destructuring function.

class TProduct extends Type {
  init(*elements) => {
    this.elements = elements.map(x => {
      if (x is Sequential)
        return TProduct(..x);
      if (x == ())
        return unit;
      return x;
    });
  }
  str() => {
    let s = "(";
    for (x in this.elements)
      s = s + ", " + x.str();
    s = s + ")";
    return s;
  }

  substitute(c: Constraint) => TProduct(
    ..this.elements.map(x => x.substitute(c))
  );

  hash() => this.elements.hash();

  __eq__(other) => this.elements == other.elements;
  __len__() => len(this.elements);
}

class TFunction extends Type {
  init(domain, range) => {
    this.domain = domain;
    this.range = range;

    if (this.domain == ()) this.domain = unit;
    if (this.range == ()) this.range = unit;

    if (this.domain is Sequential) this.domain = TProduct(..this.domain);
    if (this.range is Sequential) this.range = TProduct(..this.range);
  }

  __eq__(other) => this.domain == other.domain and this.range == other.range;

  str() => "(" + this.domain.str() + " -> " + this.range.str() + ")";

  pp() => {
    print this.domain;
    print this.range;
  }

  substitute(c: Constraint) => {
    this.domain = this.domain.substitute(c);
    this.range = this.range.substitute(c);

    return this;
  }

  apply(s: Solution) => {
    for (c in s) {
      this.substitute(c);
    }
  }
}
class TClass extends Type {}

let unit = TUnit();
let void = TVoid();
let bool = TBoolean();
let num = TNumber();
let string = TString();
let infix -> = TFunction;
let tClass = TClass();

class TypeVarSupply extends NameSupply {
  fresh() => TVar(super.fresh());
}

class TypeSystem {
  // Map vm types to object language types.
  literalType(value) => {
    let valueType = vType(value);

    if (valueType == ()) return unit;
    if (valueType == CNil) return void;
    if (valueType == CBool) return bool;
    if (valueType == CNumber) return num;
    if (valueType == OString) return string; 
    if (valueType == OInstance) return value.__class__;
    if (valueType == OClass) return tClass;
    if (valueType == OClosure) return TFunction;
  }

  inferType(node: ASTNode) => {
    let state = this.TypeStateClass(this, false);
    state.rename(node);
    let type = state.constrain(node);

    state.unify();

    if (!state.unified())
      throw Error("Can't infer type.");

    type.apply(state.solution);

    return type;
  }

  // Assemble and return the [TypeState] produced
  // by [expr].
  typecheck(expr) => {
    let node <- expr;

    let state = this.TypeStateClass(this, false);

    state.rename(node);
    state.constrain(node);
    state.unify();

    return state;
  }

  // Calculate the type of [expr], inferring it if necessary.
  type(expr) => {
    // if it's not a function, return its literal type.
    let exprType = this.literalType(expr);
    if (exprType != TFunction)
      return exprType;
  
    let node: ASTClosure <- expr;
  
    // now check if it has a global type annotation.
    exprType = globalTypeEnv()[node.name];
    if (exprType and globals()[node.name] == expr) {
      return exprType;
    }

    // otherwise infer it.
    return this.inferType(node);
  }
}


class TypeState {
  init(system: TypeSystem, debug: bool) => {
    this.system = system;
    // map from variables to types.
    this.typeEnv = Map();
    // name supply.
    this.typeVars = TypeVarSupply();
    // constraint stack.
    this.constraints = [];
    // most general set of unifiers.
    this.solution = Solution();
    // print debugging information?
    this.debug = debug;
  }

  // Look up the node in the [typeEnv]. If there's no
  // type entry, then mint a fresh type var.
  lookup(node: ASTVar) => {
    if (!this.typeEnv[node])
      this.typeEnv[node] = this.typeVars.fresh();

    return this.typeEnv[node];
  }

  // Give [ast]'s variable unique identifiers, keeping track
  // of the variables that have global type annotations.
  rename(node: ASTNode) => {
    let annotations = globalTypeEnv();

    node.stampVariables(node => {
      if (node is ASTGlobal) {
        if (node.id in annotations)
          this.typeEnv[node] = annotations[node.id];
      }
    });
  } 

  constrain(node: ASTNode) => {
    if (node is ASTClosure) {
      // give the parameters type vars if they don't
      // have annotations.
      let fnEnv = node.signature.params.reduce(
        (env: Map, param: ASTParameter) => {
          let type = param.type;

          if (type is ASTNode) type = type.resolve();

          if (type == nil)
            env[param] = this.typeVars.fresh();
          else
            env[param] = type;

          return env;
        },
        Map()
      );

      // since the params and their types are keyed by uuid,
      // we can just update the global type env when checking
      // the body of a function.
      this.typeEnv.extend(fnEnv);

      // track the types of the return values as we check the body.
      let returns = node.children.reduce(
        (returns, node) => {
          let type = this.constrain(node);

          if (node is ASTReturn)
            returns.push(type);

          return returns;
        }, []
      );

      // now build the type of the function.
      let paramCount = len(node.signature.params);

      let tParams;
      let tReturns;

      if (paramCount == 0) {
        tParams = unit;
      } else if (paramCount == 1) {
        tParams = fnEnv.values()[0];
      } else {
        tParams = fnEnv.values();
      }

      // there's always an implicit return. for now, if there are
      // explicit returns as well, we'll just ignore the implicit
      // one. once we have ast nodes for conditionals we can be
      // more discriminating.
      let tImplicitReturn = returns.pop();

      if (len(returns) == 0) {
        tReturns = tImplicitReturn;
      } else if (len(returns) == 1) {
        tReturns = returns[0];
      } else {
        tReturns = tReturns;
      }

      return tParams -> tReturns;
    }

    if (node is ASTLiteral)
      return this.system.literalType(node.value);
    
    if (node is ASTNegation)
      return this.constrain(node[0]);

    if (node is ASTVar) {
      return this.lookup(node);
    }
    
    if (node is ASTArgumentSequence) {
      let tArgs = node.children.map(this.constrain);

      if (len(tArgs) == 0)
        return unit;
      else if (len(tArgs) == 1)
        return tArgs[0];
      else
        return TProduct(..tArgs);
    }

    if (node is ASTApp) {
      let func = node[0];
      let args = node[1];

      let tFunc = this.constrain(func);
      let tArgs = this.constrain(args);

      let tApp = this.typeVars.fresh();
      this.constraints.push(Constraint(tFunc, tArgs -> tApp));
      return tApp;
    }

    if (node is ASTLocalTypeAssignment) {
      let var = node[0];
      let val = node[1];

      if (var in this.typeEnv)
        throw TypeError("Variable already has a type annotation.");

      this.typeEnv[var] = val.resolve();

      return void;
    }

    if (node is ASTAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.constrain(val);

      this.constraints.push(Constraint(tVar, tVal));

      // this should eventually respect a possibly user
      // defined __set__ method that returns something.
      return void;
    }

    if (node is ASTExprStatement)
      return this.constrain(node[0]);

    if (node is ASTReturn) 
      return this.constrain(node[0]);

    throw TypeError("Unexpected syntax.");
  } 

  solve(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;

    // apply (type variable, type) unifiers to the solution.
    if (left is TVar) {
      this.solution[left] = right;
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    } else if (right is TVar) {
      this.solution[right] = left;
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    // function constraints become domain/domain range/range constraints.
    } else if (left is TFunction and right is TFunction) {
      this.constraints.extend([
        Constraint(left.domain, right.domain),
        Constraint(left.range, right.range)
      ]);

      return true;
    // product types of equal length become pairwise sequences of constraints.
    } else if (left is TProduct and right is TProduct) {
      if (len(left) == len(right)) {

        this.constraints.extend(
          zip(left.elements, right.elements).map((x) => Constraint(..x))
        );

        return true;
      } else {
        return false;
      }
    } 

    return left == right;
  }

  // Solve the state's [constraints].
  unify() => {
    let unsolved = [];

    let i = 0;
    while (len(this.constraints) > 0) {
      if (this.debug) {
        print "-------- STEP " + str(i) + " -------------------";
        this.ppConstraints();
        print "---------------------------";
      }

      let constraint = this.constraints.pop();
      let solution = this.solve(constraint);

      if (!solution)
        unsolved.push(constraint);

      i = i + 1;
    }

    this.constraints = unsolved;
  }

  // Compute the most general type for each variable in
  // the original environment.
  principal() => {
    let env = Map();

    for (x in this.typeEnv) {
      let key = x[0];
      let val = x[1];

      if (val is TVar) {
        env[key] = this.solution[val];
      } else {
        env[key] = val;
      }
    }

    return env;
  }

  unified() => len(this.constraints) == 0;
  success() => this.unified();
  failure() => !this.unified();

  ppConstraints() => {
    for (c in this.constraints) {
      print "######## " + str(c.__class__) + " ########";
      c.pp();
      print "############################";
    }
  }
}

TypeSystem.TypeStateClass = TypeState;

let SimpleTypeState = TypeState;
let SimpleTypeSystem = TypeSystem;
