
class SimpleTypeError extends TypeError {}

class Constraint {
  init(left, right) => {
    this.left = left;
    this.right = right;
  }

  hash() => (hash . address)(this);

  str() => this.left.str() + " ~ " + this.right.str();
}

let infix(6) ~ = Constraint;

class Substitution extends Map {
  entries() => super.entries().map(e => e[0] ~ e[1]);

  update(var: TVar, type: Type) => {
    this[var] = type;

    for (sub in this)
      this[sub.left] = sub.right.substitute(var ~ type);
  }

  apply(c: Constraint) => {
    let c' = c.__class__(c.left, c.right);

    for (sub in this) {
      c'.left = c'.left.substitute(sub);
      c'.right = c'.right.substitute(sub);
    }

    return c';
  }

  pp() => {
    for (sub in this) { sub.pp(); print ""; }
  }

  copy() => this.__class__(..super.entries());
}

class Type extends Base {
  substitute(c: Constraint) => {
    if (this == c.left)
      return c.right;
    return this;
  }

  fvs() => Set();
  hasFvs() => len(this.fvs()) > 0;
  hash() => (hash . address)(this);
  apply(solution) => solution.entries().reduce(
    (type, sub) => type.substitute(sub),
    this
  );

  str() => str(this);
  tex() => this.str();
  pp() => { print this.str(); }

  infix or (that) => (TSum.lift(this) & TSum.lift(that));
}

class TFunction extends Type {
  init(domain, range) => {
    this.domain = type.typify(domain);
    this.range = type.typify(range);
  }

  __eq__(that) => this.domain == that.domain &&
                  this.range == that.range;

  str() => {
    let domain = this.domain.str(),
        range = this.range.str();

    if (this.domain is TFunction)
      domain = "(" + domain + ")";

    return domain + " -> " + range;
  }
  tex() => {
    let domain = this.domain.tex();
    if (this.domain is TFunction || this.domain is TMap)
      domain = "(#{domain})";

    return "#{domain} \to #{this.range.tex()}";
  }
  fvs() => this.domain.fvs() & this.range.fvs();

  substitute(sub) => TFunction(
    this.domain.substitute(sub),
    this.range.substitute(sub)
  );

  map(fn) => TFunction(this.domain.map(fn), this.range.map(fn));
}

class TVar extends Type {
  init(id) => {
    this.id = id;
  }
  __eq__(that) => this.id == that.id;
  hash() => hash(this.id);
  fvs() => Set(this);
  str() => "<var #{this.id}>";
  tex() => str(this.id);
}

class TypeVarSupply extends NameSupply {
  fresh() => TVar(super.fresh());
}

let globalTypeVarSupply = TypeVarSupply();
let typeVar = globalTypeVarSupply.fresh;

class TUnit extends Type {
  str() => "()";
}
class TUndefined extends Type {
  str() => "undef";
}
class TVoid extends Type {
  str() => "void";
}
class TBoolean extends Type {
  str() => "bool";
}
class TNumber extends Type {
  str() => "num";
  tex() => "n";
}
class TString extends Type {
  str() => "string";
}

class TClassy extends Type {
  init(klass) => {
    this.klass = klass;
  }
  hash() => hash(this.klass);
  __eq__(that) => this.__class__ == that.__class__ && this.klass == that.klass;
}

class TClass extends TClassy {
  str() => "TClass(" + str(this.klass) + ")";
  substitute(s) => this;
}

class TInstance extends TClassy {
  str() => "TInstance(" + str(this.klass) + ")";
}

class TCollection extends TInstance {
  init(*elements) => {
    this.klass = Base;
    this.elements = elements;
  }
  fvs() => union(..[x.fvs() | x in this.elements]);
  str() => "#{this.__class__}(#{join(this.elements.map(x => x.str()), ", ")})";
  map(fn) => this.__class__(..this.elements.map(fn));
  substitute(c: Constraint) => this.map(x => x.substitute(c));
  hash() => this.elements.hash();
  __iter__() => iter(this.elements);
  __eq__(that) => this.elements == that.elements;
  __len__() => len(this.elements);
  __get__(key) => this.elements[key];
  tex() => "[#{join(this.elements.map(x => x.tex()), ", ")}]";
}

class TProduct extends TCollection {
  init(*elements) => {
    this.klass = Tuple;
    super.init(..elements);
  }
  fvs() => union(..[x.fvs() | x in this.elements]);
}

class TSet extends TCollection {
  init(*elements) => {
    if (len(elements) != 1)
      throw TypeError("TSet requires one argument, got #{len(elements)}.");
    this.klass = Set;
    this.element = elements[0];
    super.init(this.element);
  }
  tex() => "\{#{this.element.tex()}\}";
}

let unit = TUnit();
let undef = TUndefined();
let void = TVoid();
let bool = TBoolean();
let num = TNumber();
let string = TString();
let infixr(8) -> = TFunction;

class SimpleTypeSystem {
  call(expr) => this.type(expr);
  check(expr) => this.typecheck(expr);
  _check(expr, debug) => this._typecheck(expr, debug);

  // Map vm types to object language types.
  literalType(value) => {
    let type = vmType(value);

    if (type == CUnit) return unit;
    if (type == CUndef) return undef;
    if (type == CNil) return void;
    if (type == CBool) return bool;
    if (type == CNumber) return num;
    if (type == OString) return string; 
    if (type == OInstance) return TInstance(value.__class__);
    // if it's a native we punt.
    if (type == ONative) return typeVar() -> typeVar();
    // we'll treat the type of a class as synonymous with
    // its initializer for now.
    if (type == OClass) {
      if (value.init != nil)
        return this.type(value.init);
      return unit -> TInstance(value);
    }

    // these need to be inferred.
    if (type == OFunction) return nil;
    if (type == OBoundFunction) return nil;
    if (type == OOverload) return nil;

    throw TypeError("Don't know the literal type of " + str(value) + ".");
  }

  // Classes, sequences, units, and undefined values do double
  // duty as types during annotation. Here we map them into
  // unambiguous type objects. 
  typify(value) => {
    if (value == ())
      return unit;
    if (value == undefined)
      return typeVar();
    if (value is Tuple)
      return TProduct(..value.map(this.typify));
    if (vmType(value) == OSequence)
      return this.typify(Sequence.fromRaw(value));
    if (vmType(value) == OClass)
      return TInstance(value);
    if (value is Map) {
      if (len(value) != 1)
        throw SimpleTypeError("TMap expects single key/value pair.");
      let entry = value.entries()[0];
      return TMap(
        this.typify(entry[0]), this.typify(entry[1])
      );
    }
    if (value is Set)
      return TSet(..value.elements());

    return value;
  }

  // Assemble and return the [TypeState] produced
  // by [expr].
  _typecheck(expr, debug) => {
    let node <- expr;
    let state = this.TypeStateClass(this, debug);

    node = state.transform(node);

    state.constrain(node);
    state.solve();

    return (node, state);
  }

  typecheck(expr) => this._typecheck(expr, false)[1];

  newState() => this.TypeStateClass(this, false);
  dNewState() => this.TypeStateClass(this, true);

  type(expr) => {
    let state = this.newState();
  
    return state.type(expr);
  }
}

class SimpleTypeState {
  init(system: SimpleTypeSystem, debug: bool) => {
    this.system = system;
    // map from ast variable uuids to types.
    this.varEnv = Map();
    this.uuids = NameSupply();
    // constraint stack.
    this.constraints = [];
    this.insoluble = [];
    // most general set of unifiers.
    this.solution = Substitution();
    // print debugging information?
    this.debug = debug;
    // map from ast nodes to their principal types.
    this.typeEnv = Map();
    // map from ast nodes to the constraints they generate.
    this.consEnv = Map();
    // map from constraints to the nodes that generated them.
    this.tcEnv = Map();
  }

  pushConstraint(node, constraint) => {
    if (node not in this.consEnv)
      this.consEnv[node] = [];
    this.consEnv[node].push(constraint);
    this.tcEnv[constraint] = node;
    this.constraints.push(constraint);
  }

  extendConstraints(node, constraints) => {
    for (x in constraints)
      this.pushConstraint(node, x);
  }

  copy() => {
    let state = this.__class__(this.system, this.debug);

    state.varEnv = this.varEnv.copy();
    state.constraints = this.constraints.copy();
    state.insoluble = this.insoluble.copy();
    state.solution = this.solution.copy();
    state.uuids = this.uuids;
    state.typeEnv = this.typeEnv.copy();
    state.tcEnv = this.tcEnv.copy();
    state.consEnv = this.consEnv.copy();

    return state;
  }

  // Look up the node in the [varEnv]. If there's an entry,
  // apply the current solution. Otherwise mint a fresh type
  // variable.
  lookup(node: ASTVariable) => {
    if (this.varEnv[node])
      return this.varEnv[node].apply(this.solution);

    this.varEnv[node] = typeVar();
    return this.varEnv[node];
  }

  // Give [node]'s variables unique identifiers.
  transform(node: ASTNode) => {
    node.uniquelyIdentifyVariables(this.uuids);

    return node;
  } 

  constrainFnDomain(node: ASTClosure) => {
    // map the parameter annotations into types.
    let parameters = node.signature().children;
    let paramTypes = parameters.map(p => this.system.typify(p.type));

    // since the params and their types are keyed by uuid
    // we can just update the global type env.
    this.varEnv.extend(Map(..zip(parameters, paramTypes)));

    if (node.function.arity == 0)
      return unit;
    else if (node.function.arity == 1)
      return paramTypes[0];
    else
      return TProduct(..paramTypes);
  }

  constrainFnRange(node: ASTClosure) => {
    // track the types of the return values as we check the body.
    let returnTypes = node.children.reduce(
      (types, node) => {
        let tNode = this.principal(node);
        if (node is ASTReturn) types.push(tNode);

        return types;
      }, []
    );
  
    // there's always an implicit return. if there are explicit
    // returns as well, we'll just ignore the implicit one.
    let tImplicitReturn = returnTypes.pop();

    if (len(returnTypes) == 0)
      return tImplicitReturn;
    else if (len(returnTypes) == 1)
      return returnTypes[0];
    else
      // the simple type system can't type a disjunctive range.
      throw SimpleTypeError("Don't know how to type multiple returns.");
  }

  constrain(node: ASTNode) => {
    if (node is ASTClosure) {
      let tDomain = this.constrainFnDomain(node),
          tRange = this.constrainFnRange(node);
  
      return tDomain -> tRange;
    }

    if (node is ASTClassMethod) {
      let fn = node[0];
      if (node.method.name == "init") {
        let ret = fn[len(fn.children) - 1], _this = ret[0];
        this.varEnv[_this] = TInstance(node.klass);
      }
      return this.principal(fn);
    }
  
    if (node is ASTLiteral)
      return this.system.literalType(node.value);
    
    if (node is ASTNegation) {
      let tArg = this.principal(node[0]);
      // falsiness is constrained correctly by the
      // subtype system as tArg <| (bool | void | undef)
      this.pushConstraint(node, tArg ~ bool);
      return bool;
    }
    
    if (node is ASTEquality) {
      let left = node[0], right = node[1];

      let tLeft = this.principal(left),
          tRight = this.principal(right);

      this.pushConstraint(node, tLeft ~ tRight);

      return bool;
    }

    if (node is ASTGlobal) {
      let value = node.resolve();
      return this.type(value);
    }

    // the ast closes over a variable out of
    // its scope. resolve it and type its value.
    if (node is ASTExternalUpvalue) {
      let value = node.resolve();
      return this.type(value);
    }

    if (node is ASTVariable)
      return this.lookup(node);

    if (node is ASTVariadicArgumentSequence) {
      let tArgs = node.children.map(this.constrain);
      if (len(tArgs) == 0)
        return unit;
      return TProduct(..tArgs);
    }

    if (node is ASTArgumentSequence) {
      let tArgs = node.children.map(this.constrain);
      if (len(tArgs) == 0)
        return unit;
      else if (len(tArgs) == 1)
        return tArgs[0];
      else
        return TProduct(..tArgs);
    }

    if (node is ASTApp) {
      let func = node[0];
      let args = node[1];

      let tFunc = this.principal(func);
      let tArgs = this.principal(args);
      let tApp = typeVar();

      this.pushConstraint(node, tFunc ~ tArgs -> tApp);

      return tApp;
    }

    if (node is ASTLocalTypeAssignment) {
      let var = node[0];
      let ano = node[1];

      let tVar = this.lookup(var);
      let tAno = this.system.typify(ano.resolve());

      this.pushConstraint(node, tVar ~ tAno);

      return void;
    }
  
    if (node is ASTAssignment) {
      let var = node[0];
      let val = node[1];

      let tVar = this.lookup(var);
      let tVal = this.principal(val);

      this.pushConstraint(node, tVar ~ tVal);

      // this should eventually respect a possibly user
      // defined __set__ method that returns something.
      return void;
    }

    if (node is ASTExprStatement)
      return this.principal(node[0]);

    if (node is ASTReturn) 
      return this.principal(node[0]);
    
    if (node is ASTBlock) {
      node.children.map(this.principal);
      return void;
    }

    if (node is ASTThrow) {
      let exc = node[0];
      let tExc = this.principal(exc);
      this.pushConstraint(node, tExc ~ TInstance(Error));
      return void;
    }

    throw TypeError("Unexpected syntax: " + str(node) + ".");
  }

  // The occurs check.
  occurs(var: TVar, type: Type) => type is not TVar and var in type.fvs();

  unify(constraint: Constraint) => {
    let unified = this._unify(constraint);

    if (this.debug) {
      print "  ----------- UNIFY -----------";
      print "  " + constraint.str() + " = " + str(unified);
      print "  ------------------------------";
    }
    return unified;
  }

  _unify(constraint: Constraint) => {
    let left = constraint.left,
        right = constraint.right;
    
    // unit only unifies with itself.
    if (left == unit or right == unit)
      return left == right;

    // apply (type variable, type) unifiers to the solution.
    if (left is TVar) {
      if (this.occurs(left, right))
        return false;

      this.solution.update(left, right);
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    }
    
    if (right is TVar) {
      if (this.occurs(right, left))
        return false;

      this.solution.update(right, left);
      this.constraints = this.constraints.map(this.solution.apply);

      return true;
    }
    
    // function constraints become domain/domain range/range constraints.
    if (left is TFunction and right is TFunction) {
      this.extendConstraints(this.tcEnv[constraint], [
        // fixme: the compiler fails when these are unparenthesized.
        (left.domain ~ right.domain),
        (left.range ~ right.range)
      ]);

      return this.solve();
    }

    // collection types of equal length become pairwise sequences of constraints.
    if (left is TCollection && right is TCollection) {
      if (len(left) != len(right))
        return false;

      this.extendConstraints(this.tcEnv[constraint],
        zip(left.elements, right.elements).map(x => x[0] ~ x[1])
      );
      return this.solve();
    }

    return left == right;
  }

  // Solve the state's [constraints].
  solve() => {
    let i = 0;
    while (len(this.constraints) > 0) {
      if (this.debug) {
        print "----------- STEP " + str(i) + " -----------";
        this.ppConstraints();
        print "------------------------------";
      }

      let constraint = this.constraints.pop();
      let unifiable = this.unify(constraint);

      if (!unifiable)
        this.insoluble.push(constraint);
 
      i = i + 1;
    }

    if (this.debug and len(this.solution) > 0) {
      print "--------- SOLUTION -----------";
      this.ppSolution();
      print "------------------------------";
    }

    return this.solved();
  }

  principal(node: ASTNode) => {
    let type = this.constrain(node);

    this.typeEnv[node] = type;

    if (this.solve())
      return type.apply(this.solution);

    return type;
  }

  infer(expr) => {
    let node <- expr;

    node = this.transform(node);

    return this.principal(node);
  }

  constrainAnnotation(annotation, type) => this.constraints.push( 
    annotation ~ type
  );

  unifyAnnotations(expr, type) => {
    let tAnnotations = annotations(expr).map(this.system.typify);

    for (annotation in tAnnotations)
      this.constrainAnnotation(annotation, type);

    if (this.solve())
      type = type.apply(this.solution);

    return type;
  }

  // Calculate the type of [value], inferring it if necessary.
  type(value) => {
    let type = this.system.literalType(value);

    if (type) return type;

    type = this.infer(value);
    type = this.unifyAnnotations(value, type);

    return type;
  }

  solved() => len(this.constraints) == 0 and len(this.insoluble) == 0;
  success() => this.solved();
  failure() => !this.solved();

  ppConstraints() => {
    for (let i = 0; i < len(this.constraints); i = i + 1) {
      print str(i) + ") " + this.constraints[i].str();
    }
  }
  ppInsoluble() => {
    for (let i = 0; i < len(this.insoluble); i = i + 1) {
      let c = this.insoluble[i];
      print "#{i}) #{c.str()}";
    }
  }
  ppSolution() => {
    for (c in this.solution)
      print c.left.str() + " = " + c.right.str();
  }
  ppAST(tree: ASTNode) => tree.ppRepr(
    (x, depth) => {
      let s;
      if (this.typeEnv[x])
        s = "#{indent(depth)}#{x.str()}: #{this.typeEnv[x].apply(this.solution).str()}";
      else
        s = indent(depth) + x.str();

      if (x in this.consEnv) {
        s = s + " / [#{join([c.str() | c in this.consEnv[x]], ", ")}]";
      }
      print s;
    }
  );
}

SimpleTypeSystem.ConstraintClass = Constraint;
SimpleTypeSystem.TypeStateClass = SimpleTypeState;
