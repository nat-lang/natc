
class Sequence extends Object {
  __get__(idx) => this.values[idx];
  __set__(idx, val) => {
    this.values[idx] = val;
    return this;
  }
  __len__() => len(this.values);
  __eq__(seq) => {
    if (len(this) != len(seq)) return false;

    for (let i = 0; i < len(this); i = i + 1)
      if (this[i] != seq[i]) return false;

    return true;
  }

  __in__(value) => value in this.values or this.has(value);

  __iter__() => Iterator(this, 0, len(this));

  fmap(fn) => [fn(value) | value in this];

  fold(fn, acc) => {
    for (x in this)
      acc = fn(acc, x);

    return acc;
  }

  all(predicate) => this.fmap(predicate).fold(and, true);
  some(predicate) => this.fmap(predicate).fold(or, false);
}
