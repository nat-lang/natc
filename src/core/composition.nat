
class CompositionError extends Error {}

class AnnotatedTree extends Tree {
  init(data, children, type: Type) => {
    super.init(data, children);
    this.type = type;
  }
  str() => {
    if (this.type)
      return this.type.str();
    return "";
  }

  texInterior() => {
    let datum = () => {
      if (this.data == nil) return "";

      let type = TypeSystem.type(this.data);

      if (vType(this.data) in [OFunction, OOverload]) {
        let ast <- this.data;
        return "{$#{type.tex()}$ \\ $#{ast.tex()}$ \\ #{this.data.name}}";
      }

      return "{$#{type.tex()}$ \\ #{this.data}}";
    };

    if (this.leaf()) return "[#{datum()}]";

    let children = join(this.children.map(x => x.texInterior()), " ");
    return "[#{datum()} #{children}]";
  }

  texRoot() => "\begin{exe} \ex \[ \begin{forest} #{this.texInterior()} \end{forest} \] \end{exe}";

  tex() => this.texRoot();
}

class CompositionSystem {
  init() => {
    this.binaryRules = [];
    this.unaryRules = [];
  }

  addRule(rule) => {
    if (rule.arity == 1)
      this.unaryRules.add(rule);
    else if (rule.arity == 2)
      this.binaryRules.add(rule);
    else
      throw CompositionError("Rule must be unary or binary.");
  }

  addRules(*rules) => {
    for (rule in rules)
      this.addRule(rule);
  }

  // Map a Tree into an AnnotatedTree.
  evaluate(node: Tree) => {
    if (node.leaf())
      return AnnotatedTree(node.data, [], TypeSystem.type(node.data));

    if (node.unary()) {
      let child = this.evaluate(node[0]);
      return AnnotatedTree(child.data, [child], child.type);
    }

    if (node.binary()) {
      let left = this.evaluate(node[0]),
          right = this.evaluate(node[1]);

      for (rule in this.binaryRules) {
        let data = rule(left.data, right.data);

        if (data != undefined)
          return AnnotatedTree(data, [left, right], TypeSystem.type(data));
      }

      return AnnotatedTree(node.data, [left, right], nil);
    }

    throw CompositionError("Nonbinary tree.");
  }
}
