
class TypedTree extends Tree {
  init(data, children, type: Type) => {
    super.init(data, children);
    this.type = type;
  }
  str() => {
    let s = "[";
    s = s + this.type.str();
    for (x in this.children)
      s = s + " " + x.str();
    s = s + "]";
    return s;
  }
}

class CompositionSystem {
  init(binaryRules, unaryRules, typeShifters) => {
    this.binaryRules = binaryRules;
    this.unaryRules = unaryRules;
    this.typeShifters = typeShifters;
  }

  // Map a Tree into a TypedTree.
  type(node: Tree) => {
    if (node.leaf()) {
      let data = node.data;
      return TypedTree(() => data, [], TypeSystem.type(node.data));
    }

    if (node.unary()) {
      let child = this.type(node[0]);
      return TypedTree(child.data, [child], child.type);
    }

    if (node.binary()) {
      let left = this.type(node[0]),
          right = this.type(node[1]);

      for (rule in this.binaryRules) {
        let l = left.data, r = right.data, data = () => rule(l(), r());

        let type = TypeSystem.type(data);

        if (type.range) {
          return TypedTree(data, [left, right], type);
        }
      }

      return TypedTree(node.data, [left, right], nil);
    }

    throw CompositionError("Nonbinary tree.");
  }

  interpret(node: Tree) => this.type(node).data;
  typecheck(node: Tree) => this.type(node).type != nil;
}