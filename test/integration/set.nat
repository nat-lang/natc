
let set;

// null set.

set = {};

assert(set.subsetEq(set));
assert(!set.subset(set));

assert(set.supsetEq(set));
assert(!set.supset(set));
assert(set.union(set) == set);
assert(set.intersection(set) == set);
assert(set.complement(set) == set);

assert(1 not in set);
assert(!set(1));

// num set.

set = {1,2,3};

assert(set(1));

assert(1 in set);
assert(2 in set);
assert(3 in set);
assert(4 not in set);

assert(set.subset({1,2,3,4}));
assert(set.subsetEq({1,2,3,4}));

assert(set.supset({1,2}));
assert(set.supsetEq({1,2}));

assert(set.subsetEq({1,2,3}));
assert(set.supsetEq({1,2,3}));

assert(set == {1,2,3});

assert(set.union({4,5,6}) == {1,2,3,4,5,6});
assert(set.intersection({2,3,4}) == {2,3});
assert(set.complement({1,2}) == {3});

// string set.

set = {"a","b","c"};

assert(set("a"));

assert("a" in set);
assert("b" in set);
assert("c" in set);
assert("d" not in set);

assert(set.subset({"a","b","c","d"}));
assert(set.subsetEq({"a","b","c","d"}));

assert(set.supset({"a","b"}));
assert(set.supsetEq({"a","b"}));

assert(set.subsetEq({"a","b","c"}));
assert(set.supsetEq({"a","b","c"}));

assert(set == {"a","b","c"});
assert(set.union({"d","e","f"}) == {"a","b","c","d","e","f"});
assert(set.complement({"a","b"}) == {"c"});

// comprehension.

// literal body.
set = {true | a in [1,2,3]};
assert(set == {true});

// variable body.
set = {a | a in [1,2,3]};
assert(set == {1,2,3});

// nested body.
set = {{true | b in a} | a in [[1,2], [3], [4,5]]};
assert(set == {{true}});

set = {{b | b in a} | a in [[1,2], [3], [4,5,5]]};
assert(set == {{1,2}, {3}, {4,5}});

set = {a | a in {{1,2}, {3}, {4,5}}};
assert({1,2} in set);

set = {{b | b in a} | a in {{1,2}, {3}, {4,5,5}}};
assert(set == {{1,2}, {3}, {4,5}});

set = {{true | b in a} | a in {{1,2}, {3}, {4,5}}};
assert(set == {{true}});

// nested condition.
set = {a | a in {a | a in [1,1,2,2,3,3]}};
assert(set == {1,2,3});

set = {a | a in {a | a in {1,1,2,2,3,3}}};
assert(set == {1,2,3});

// sequence comprehension in body.
set = {[a | a in b] | b in [[1,2], [3,4]]};

assert([3,4] in set);
assert([1,2] in set);

// api.

// powerset.

let powerset = {1,2,3}.powerset();

assert(len(powerset) == 8);

assert({1,2,3} in powerset);
assert({1,2} in powerset);
assert({2,3} in powerset);
assert({1,3} in powerset);
assert({1} in powerset);
assert({2} in powerset);
assert({3} in powerset);
assert({} in powerset);

// hash function.

assert(hash({1}) == hash({1}));
assert(hash({1}) != hash({{1}}));

assert(hash(1) != hash({1}));

let s = Set();
const A, B, C;

s.add((A,B));
assert((A,B) in s);
assert(len(s) == 1);

s.add((B,C));
assert(len(s) == 2);
assert((A,B) in s);
assert((B,C) in s);
