
// the raw sequence object.
// --------------------------------------

let seq = [1,2,3].values;

// subscript access.
assert(seq[0] == 1);
assert(seq[1] == 2);
assert(seq[2] == 3);

// subscript assignment.
seq[0] = 2;
assert(seq[0] == 2);
seq[2] = 0;
assert(seq[2] == 0);

// the sequence class.
// --------------------------------------

let seq;

// api.

seq = [1,2,3];

let sum = seq.fold((a,b) => a + b, 0);

assert(sum == 6);
assert(seq.fmap((a) => a + 1) == [2,3,4]);

seq.add(4);

let sum = seq.fold((a,b) => a + b, 0);

assert(sum == 10);
assert(seq.fmap((a) => a + 1) == [2,3,4,5]);

// sequence comprehension.
// --------------------------------------

let seq;

// literal body.

seq = [true | a in [1,2,3]];
assert(seq == [true,true,true]);

// variable body.

seq = [a | a in [1,2,3]];
assert(seq == [1,2,3]);

// expression body.

seq = [a + 1 | a in [1,2,3]];
assert(seq == [2,3,4]);

// multiple iterable conditions.

// cartesian product of a and b.
seq = [[a, b] | a in [1,2,3], b in [3,2,1]];
assert(seq == [
  [1,3],[1,2],[1,1],
  [2,3],[2,2],[2,1],
  [3,3],[3,2],[3,1]
]);

// vacuous condition.

seq = [a | a in [1,2,3], true];
assert(seq == [1,2,3]);

seq = [a | a in [1,2,3], false];
assert(seq == []);

// predicative condition anaphoric on previous condition.

seq = [a | a in [1,2,3], a != 3];
assert(seq == [1,2]);

seq = [a | a in [1,2,3], a != 3, a != 2];
assert(seq == [1]);

// iterable condition anaphoric on previous condition.

seq = [b | a in [[1,2],[3,4],[5,6]], b in a];
assert(seq == [1,2,3,4,5,6]);

seq = [b + c | a in [[1,2]], b in [3,4], c in a];
assert(seq == [4,5,5,6]);

seq = [[b, c] | a in [[1,2],[3,4]], b in a, c in a];
assert(seq == [
  [1,1],
  [1,2],
  [2,1],
  [2,2],
  [3,3],
  [3,4],
  [4,3],
  [4,4]
]);

// nested body comprehension.

seq = [[true | b in a] | a in [[1,2],[3], [4,5]]];
assert(seq == [
  [true,true],
  [true],
  [true, true]
]);

// nested condition comprehension.

seq = [a | a in [a | a in [1,2,3]]];
assert(seq == [1,2,3]);

