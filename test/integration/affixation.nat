
let infix &;

& = (a, b) => a + b;

// simplest case.
assert(2 & 2 == 4);

// still callable as prefix.
assert(&(2,2) == 4);

// precedence parsing for complex operands.
assert(2 & ((() => 5)()) == 7);

// as arguments.
assert(&(2 & 2, 2 & 2) == 8);

// with objects as operands.
& = (set1, set2) => set1.union(set2);

assert({1,2,3} & {4,5,6} == {1,2,3,4,5,6});
