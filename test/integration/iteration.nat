
// native for-loop.
for (let i = 0; i < 10; i = i + 1) {
  assert(i < 10 and i >= 0);
}

// native while loop.

let i = 0;

while (i < 10) {
  assert(i < 10 and i >= 0);
  i = i + 1;
}

// core sequence iteration.

for (y in [1,2,3]) {
  assert(y == 1 or y == 2 or y == 3);
}

for (y in []) {
  assert(false);
}

// iteration protocol.

class Iterable {
  init() => {
    this[0] = "a";
    this[1] = "b";
    this[2] = "c";
  }

  __iter__() => Iterator([this[0], this[1], this[2]], 0, 3);
}

for (x in Iterable()) { 
  assert(
    (x == "a") or (x == "b") or (x == "c")
  );
}

let iterator = iter(Iterable());

assert(len(iterator) == 3);

assert(iterator.next() == "a");
assert(len(iterator) == 2);

assert(iterator.next() == "b");
assert(len(iterator) == 1);

assert(iterator.next() == "c");
assert(len(iterator) == 0);