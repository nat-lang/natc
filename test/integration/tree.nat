let tree;

// literal trees.

tree = [1 2 3];

assert(tree[0].data == 1);
assert(tree[1].data == 2);
assert(tree[2].data == 3);

tree = [1 [2 3 4] [5 6 7]];

assert(tree[0].data == 1);
assert(tree[1][0].data == 2);
assert(tree[1][1].data == 3);
assert(tree[1][2].data == 4);
assert(tree[2][0].data == 5);
assert(tree[2][1].data == 6);
assert(tree[2][2].data == 7);

tree = [151334 [134152 312451 41556341] [5124125 613412 7124124]];

assert(tree[0].data == 151334);
assert(tree[1][0].data == 134152);
assert(tree[1][1].data == 312451);
assert(tree[1][2].data == 41556341);
assert(tree[2][0].data == 5124125);
assert(tree[2][1].data == 613412);
assert(tree[2][2].data == 7124124);

tree = [true false false];

assert(tree[0].data);
assert(!tree[1].data);
assert(!tree[2].data);

// expression trees.

tree = [(1 + 1) (1 + 2) (1 + 3)];

assert(tree[0].data == 2);
assert(tree[1].data == 3);
assert(tree[2].data == 4);

let id = (a) => a;

tree = [id(1) id(2) id(3)];

assert(tree[0].data == 1);
assert(tree[1].data == 2);
assert(tree[2].data == 3);

// tree api.

tree = [1 [2 3 4] [5 6 7]];

print [leaf.data | x in tree.children, leaf in x.children].values;

print "-";
print tree.leaves().values;
print "-";

assert(tree.leaves() == [1,2,3,4,5,6,7]);

// fill the interior nodes.
tree = tree.map((a) => {
  if (!a) return 0;
  return a;
});

let sum = tree.reduce(+, 0);

assert(sum == 28);
