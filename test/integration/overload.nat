
// overloads can dispatch on naked literals.

let f = 1 => true | 2 => false;

assert(f(1));
assert(f(2) == false);
assert(f(3) == undefined);

let f = nil => true;

assert(f(nil));
assert(f(2) == undefined);

let f = nil => true | undefined => true | false => false;

assert(f(nil));
assert(f(undefined));
assert(f(false) == false);

// overloads can dispatch on parenthesized literals.

let f = (true) => false | (false) => true;

assert(f(true) == false);
assert(f(false) == true);

// overloads can dispatch on multiple literals.

let f = (0,1) => 2 | (1,0) => 3;

assert(f(0,1) == 2);
assert(f(1,0) == 3);

// overloads can dispatch on variables, which act as wild cards.

let f = 1 => true | 2 => false | x => x;

assert(f(1));
assert(f(2) == false);
assert(f(3) == 3);

let f = x => true | 1 => false;
assert(f(1) == true);

let f = x => true | y => false;
assert(f(1) == true);

// overloads can dispatch on multiple variables.

let f = (0,1) => 2 | (x,y) => x + y;

assert(f(0,1) == 2);
assert(f(1,0) == 1);
assert(f(1,1) == 2);
assert(f(2,1) == 3);

// overloads can return blocks.

let f = 1 => { return true; } | 2 => { return false; }; 

assert(f(1) == true);
assert(f(2) == false);
assert(f(3) == undefined);

// overload signatures can mix literals and variables.

let f = (2,x) => x | (x,2) => x;

assert(f(2,1) == 1);
assert(f(2,2) == 2);
assert(f(2,3) == 3);

assert(f(1,2) == 1);
assert(f(2,2) == 2);
assert(f(3,2) == 3);

// overloads can dispatch on type annotations.

let f = (x: num) => true | (x: string) => false | (x: bool) => true;

assert(f(1) == true);
assert(f("1") == false);
assert(f(false) == true);

// overloads can dispatch on type annotations with type constructors.

let f = (x: num -> num) => x(1)
      | (x: string -> string) => x("1")
      | (x: bool -> bool) => x(true);

assert(f((x: num) => x) == 1);
assert(f((x: string) => x) == "1");
assert(f((x: bool) => x) == true);

let g: num -> num = x => x;
let h: string -> string = x => x;
let k: bool -> bool = x => x;

assert(f(g) == 1);
assert(f(h) == "1");
assert(f(k) == true);

// overloads can dispatch on type annotations with class types.

class A {}
class B {}

let f = (x: A) => true | (x: B) => false;

let a = A(), b = B();

assert(f(a) == true);
assert(f(b) == false);

// dispatching on a class type matches subtypes.

class C extends B {}

let f = (x: B) => true | (x: C) => false;

let c = C();

assert(f(c) == true);

// overload signatures can mix literals and variables with type annotations.

let f = (1, x: num) => true | (1, x: string) => false | (2, x: string) => true;

assert(f(1,1) == true);
assert(f(1,"1") == false);
assert(f(2,"1") == true);

// overload signatures can have implicit type variables.

let f = (a: num, b: num) => a | (a: x, b: x) => b;

assert(f(1,2) == 1);
assert(f(true, false) == false);
assert(f(nil, nil) == nil);
assert(f(x => x, x => x * 2)(1) == 2);

assert(f(1, true) == undefined);
assert(f(true, 1) == undefined);
assert(f((x: num) => x, (x: bool) => x) == undefined);

// the type variables are bound at the left edge of the signature,
// which means that they can constrain each other.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

assert(f(x => x, 1) == 1);
assert(f(1, x => x) == 1);

assert(f((x: num) => x, 1) == 1);
assert(f((x: string) => x, 1) == undefined);
assert(f((x: bool) => x, 1) == undefined);

assert(f(1, (x: num) => x) == 1);
assert(f(1, (x: string) => x) == undefined);
assert(f(1, (x: bool) => x) == undefined);

// overloads can dispatch on instantiated abstract types.

let f = (a: bool -> bool, b: bool) => a(b)
      | (a: num, b: num -> num) => b(a);

let k: u -> (u -> u) = x y => !y;
let g = k(true);

assert(f(g, true) == false);
assert(f(g, false) == true);

assert(f(g, 1) == undefined);

let k: u -> (u -> u) = x y => y + 1;
let g = k(1);

assert(f(1, g) == 2);
assert(f(2, g) == 3);

assert(f(true, g) == undefined);

// overloads can dispatch on overloads.

let f = (g: num -> bool & string -> bool) => 1
      | (g: num -> bool & bool -> bool) => 2;

assert(f((x: num) => true | (x: string) => false) == 1);
assert(f((x: num) => true | (x: bool) => false) == 2);
assert(f((x: string) => true | (x: bool) => false) == undefined);

// overloads can dispatch on instantiated abstract overloads.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

let k: (num -> bool) -> (num -> bool) = f x => f(x);
let g: num -> bool = x => x == 1;

assert(f(1, f(k,g)) == true);
assert(f(1, f(g,k)) == true);
assert(f(f(k,g), 1) == true);
assert(f(f(g,k), 1) == true);

assert(f(2, f(k,g)) == false);
assert(f(2, f(g,k)) == false);
assert(f(f(k,g), 2) == false);
assert(f(f(g,k), 2) == false);

assert(f(true, f(k,g)) == undefined);
assert(f(true, f(g,k)) == undefined);
assert(f(f(k,g), true) == undefined);
assert(f(f(g,k), true) == undefined);

