
let infix &;

& = (a, b) => a+b;

// simplest case.
assert(2 & 2 == 4);

// callable as prefix.
assert(&(2,2) == 4);

// as arguments.
assert(&(2 & 2, 2 & 2) == 8);

// variable operands.
let a = 2;
assert(a & a == 4);

// with objects as operands.
& = (set1, set2) => set1.union(set2);

assert({1,2,3} & {4,5,6} == {1,2,3,4,5,6});

// with functions as operands.
let infix ~ = (f, g) => (x) => f(g(x));

assert((((a) => a + 1) ~ ((a) => a + 1))(0) == 2);

// precedence.

let infix(6) plus = (a,b) => a + b;
let infix(7) times = (a,b) => a * b;

assert(5 plus 5 == 10);
assert(5 times 5 == 25);
assert(5 plus 5 times 2 == 15);
