
// constants.

const Agnetha, Bjorn, Benny, Carlos, Paco, Frida, Ariel, Ursula, Sebastian, Sam;

// types.

dom e = {Agnetha, Bjorn, Benny, Carlos, Paco, Frida, Ariel, Ursula, Sebastian, Sam};
dom t = {true, false};

bool = t;

// common nouns.

let Singer = {};
let singer: e -> t = x => x in Singer;

let Millionaire = {};
let millionaire: e -> t = x => x in Millionaire;

let Norwegian = {};
let norwegian: e -> t = x => x in Norwegian;

let Guy = {};
let guy: e -> t = x => x in Guy;

// intransitive verbs.

let Smile = {};
let smiled: e -> t = x => x in Smile;

let Smoke = {};
let smokes: e -> t = x => x in Smoke;

let Drink = {};
let drinks: e -> t = x => x in Drink;

// transitive verbs.

// fixme.
// let TransitiveVerb
//   : {(e,e)} -> e -> e -> t
//   = relation x y => (x,y) in relation;
// let Love = {(Agnetha, Agnetha)};
// let loves = TransitiveVerb(Love);

let Love = {(Agnetha, Agnetha)};
let loves: e -> e -> t = x y => (x,y) in Love;

let Shave = {};
let shaves: e -> e -> t = x y => (x,y) in Shave;

let Like = {(Agnetha, Agnetha)};
let likes: e -> e -> t = x y => (x,y) in Like;

// ditransitive verbs.

let Introduce = {};
let introduced: e -> e -> e -> t = x y z => (x,y,z) in Introduce;

// prepositions.

let to : e -> (e -> e -> t) -> e -> t
       = x p y => p(x)(y);

let self1 : (e -> e -> t) -> e -> t
          = p x => p(x)(x);

let self2 : (e -> e -> e -> t) -> e -> e -> t
          = p x y => p(x)(y)(y);

let self3 : (e -> e -> e -> t) -> e -> e -> t
          = p x y => p(x)(y)(x);

let With = {};
let with: e -> e -> t = x y => (x,y) in With;

let of: e -> e = x => x;

// 1-place adjectives.

let Kind = {};
let kind: e -> t = x => x in Kind;

let Snore = {};
let snores: e -> t = x => x in Snore;

// 2-place adjectives.

let Proud = {};
let proud: e -> e -> t = x y => (x,y) in Proud;

let Hug = {};
let hugged: e -> e -> t = x y => (x,y) in Hug;

let Afraid = {};
let afraid: e -> e -> t = x y => (x,y) in Afraid;

// copula.

let is': (e -> t) -> e -> t = p => p;
let does = x => x;

// negation.

let not = (p: e -> t) => (x => !p(x))
        | (p: t) => !p;

// quantifiers.

let everybody: (e -> t) -> t = p => e.each(p);
let somebody: (e -> t) -> t = p => e.some(p);
let nobody: (e -> t) -> t = p => !e.some(p);

// determiners.

let a: (e -> t) -> e -> t = p => p;
let some: (e -> t) -> (e -> t) -> t = p q => e.some(x => p(x) and q(x));
let no: (e -> t) -> (e -> t) -> t = p q => !e.some(x => p(x) and q(x));
let every: (e -> t) -> (e -> t) -> t = p q => e.each(x => !p(x) or q(x));

// coordination.

let or': (e -> t) -> (e -> t) -> (e -> t) = p q x => p(x) or q(x);

// composition rules.

let NonBranchingNodes = x => x;

let FunctionApplication = (a: x -> y, b: x) => a(b) | (a: x, b: x -> y) => b(a);

let QuantificationalObject
  = (r: (e -> e -> t), q: (e -> t) -> t) => (x => q(z => r(z)(x)))
  | (q: (e -> t) -> t, r: (e -> e -> t)) => (x => q(z => r(z)(x)));

Grammar.addRules(
  FunctionApplication,
  NonBranchingNodes,
  QuantificationalObject
);

// examples.

let typecheck = Grammar.typecheck;

let ex0 = [Agnetha smiled];
typecheck(ex0);

let ex1 = [Agnetha [loves Bjorn]];
typecheck(ex1);

let ex2 = [Benny [[introduced Agnetha] [to Bjorn]]];
typecheck(ex2);

let ex3 = [Carlos [self1 shaves]];
typecheck(ex3);

let ex4 = [Carlos [[self2 introduced] Paco]];
typecheck(ex4);

let ex5 = [Carlos [[self3 introduced] Paco]];
typecheck(ex5);

let ex6 = [Bjorn [is' kind]];
typecheck(ex6);

let ex7 = [Frida [is' [with Benny]]];
typecheck(ex7);

let ex8 = [Benny [is' [proud [of Frida]]]];
typecheck(ex8);

let ex9 = [Agnetha [is' [a singer]]];
typecheck(ex9);

let ex10 = [Frida [is' [a [norwegian millionaire]]]];
Grammar.typefail(ex10);

let ex11 = [Bjorn [is' [not kind]]];
typecheck(ex11);

let ex12 = [[every singer] smiled];
typecheck(ex12);

let ex13 = [[a singer] smiled];
Grammar.typefail(ex13);

let ex14 = [everybody snores];
typecheck(ex14);

let ex15 = [somebody [hugged Ariel]];
typecheck(ex15);

let ex16 = [everybody [is' [afraid [of Ariel]]]];
typecheck(ex16);

let ex17 = [nobody [likes Ursula]];
typecheck(ex17);

let ex18 = [[some guy] [hugged Sebastian]];
typecheck(ex18);

let ex19 = [Sam [smokes [or' drinks]]];
typecheck(ex19);

let ex20 = [everybody [smokes [or' drinks]]];
typecheck(ex20);

let ex21 = [Agnetha [likes nobody]];
typecheck(ex21);

let like = likes,
    ex22 = [Agnetha [does [not [like everybody]]]];
typecheck(ex22);

ex22.pp();