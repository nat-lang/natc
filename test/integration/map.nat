
// declaration and access.

let map = {"a": 1};

let a = "a";

assert(map["a"] == 1);
assert(map[a] == 1);
assert(map[(() => { return "a"; })()] == 1);

let map = {"a": 1, "b": 2};

let b = "b";

assert(map["b"] == 2);
assert(map[b] == 2);
assert(map[(() => { return "b"; })()] == 2);

// assignment.

map["a"] = 3;

assert(map["a"] == 3);

// membership.

assert("a" in map);

map["c"] = 3;

assert("c" in map);

// literal keys.

map = {1: 1, 2: 2};
assert(map[1] == 1);

map = {true: 1, false: 0};
assert(map[true] == 1);

map = {nil: 1};
assert(map[nil] == 1);

// variable keys.

let x = "x", y = "y", z = "z";

map = {x: 1, y: 2};

assert(map[x] == 1);
assert(map[y] == 2);

map[x] = 3;
map[y] = 4;
map[z] = 5;

assert(map[x] == 3);
assert(map[y] == 4);
assert(map[z] == 5);

// expression keys.

map = {1 + 1: 2};

assert(map[2] == 2);

map = {true and false: false};

assert(map[false] == false);

map = {true and false: false, true and true: true};

assert(map[false] == false);
assert(map[true] == true);

// api.

map = {"a":1, "b": 2};

for (key in map.keys()) {
  assert(key == "a" or key == "b");
}

for (val in map.values()) {
  assert(val == 1 or val == 2);
}

assert(map.subMap(map));
assert(map.subMap({"a":1, "b": 2, "c": 3}));
assert(map.subMap({"a":1, "b": 2, "c": 4}));
assert(!map.subMap({"a":1, "b": 1}));
