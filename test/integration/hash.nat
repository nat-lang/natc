
// native hash.

assert(hash(true) == hash(true));
assert(hash(false) == hash(false));
assert(hash(true) != hash(false));
assert(hash(1) == hash(1));
assert(hash(1) != hash(2));
assert(hash("abc") == hash("abc"));
assert(hash("abc") != hash("cba"));

// extensible hash.

class Hashable {
  init(x) => {
    this.x = x;
  }

  __hash__() => {
    return this.x * 123;
  }
}

let a = Hashable(1);
let b = Hashable(1);
let c = Hashable(2);

print (a.__hash__());

assert(hash(a) == hash(b));
assert(hash(a) != hash(c));

// as hash keys.

let mapA = {a: 1, b: 1, c: 2};
let mapB = {b: 1, c: 2};

assert(mapA == mapB);

let setA = {a,b,c};
let setB = {b,c};

assert(setA == setB);

