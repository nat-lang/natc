let seq;

// literal body.

seq = [true | a in [1,2,3]];
assert(seq == [true,true,true]);

// variable body.

seq = [a | a in [1,2,3]];
assert(seq == [1,2,3]);

// expression body.

seq = [a + 1 | a in [1,2,3]];
assert(seq == [2,3,4]);

// multiple iterable conditions.

// cartesian product of a and b.
seq = [[a, b] | a in [1,2,3], b in [3,2,1]];

// predicative condition.

seq = [a | a in [1,2,3], a != 3];
assert(seq == [1,2]);

seq = [a | a in [1,2,3], a != 3, a != 2];
assert(seq == [1]);

// vacuous condition.

seq = [a | a in [1,2,3], true];
assert(seq == [1,2,3]);

seq = [a | a in [1,2,3], false];
assert(seq == []);

// iterable condition bound by previous condition.

seq = [b | a in [[1,2],[3,4],[5,6]], b in a];
assert(seq == [1,2,3,4,5,6]);

seq = [b + c | a in [[1,2]], b in [3,4], c in a];
assert(seq == [4,5,5,6]);

seq = [[b, c] | a in [[1,2],[3,4]], b in a, c in a];
assert(seq == [
  [1,1],
  [1,2],
  [2,1],
  [2,2],
  [3,3],
  [3,4],
  [4,3],
  [4,4]
]);
