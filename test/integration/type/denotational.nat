
sym a,b,c,d;

dom e = {a,b,c,d};
dom t = {true, false};

bool = t;

// inference.

assert(e is Domain);
assert(t is Domain);

assert(type(a) == e);
assert(type(true) == t);

// simple.

typecheck((f: e -> t) => f(a));
typecheck((f: t -> e) => f(true));

typefail((f: t -> e) => f(a));
typefail((f: e -> t) => f(true));

typecheck((f: e -> t, g: t -> e) => f(g(true)));

// subtype.

typecheck((f: (e or t) -> e) => f(a));
typecheck((f: (e or t) -> e) => f(true));

typefail((f: (e or t) -> e) => f(nil));

// poly adhoc.

let f = (a: x -> y, b: x) => a(b)
      | (a: x, b: x -> y) => b(a);

let g: e -> t = x => x in {a,b};
let h: (e -> t) -> (e -> t) = f x => f(x);

typecheck(() => f(g, a));
typecheck(() => f(a, g));

typefail(() => f(g, 1));
typefail(() => f(1, g));

typecheck(() => f(h, g));
typecheck(() => f(g, h));

typefail(() => f(h, 1));
typefail(() => f(1, h));

// quantification.

typecheck(() => for all (x in e) x in {a,b});
typecheck(() => for some (x in t) x);

typefail(() => for no (x in e) x);

typecheck(() => ((p: e -> t) => for some (x in e) p(x) or !p(x))(x => x in {c,d}));
typecheck(() => ((p: e -> t) => for some (x in e) p(x) and !p(x))(x => x in {c,d}));

typefail(() => ((p: e -> t) => for some (x in t) p(x) or !p(x))(x => x in {c,d}));
typefail(() => ((p: e -> t) => for some (x in e) p(x) and !p(x))(x => x in {true,false}));