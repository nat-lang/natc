let typecheck = x => assert(
  SimpleTypeSystem.typecheck(x).success()
);
let typefail = x => assert(
  SimpleTypeSystem.typecheck(x).failure()
);

// the simple type system types functions.
// --------------------------------------------

// no argument, implicit return.

let f: () -> num = () => 1;

assert(annotations(f)[0] == () -> num);

typecheck(() => f());
typefail(() => f(true));
typefail(() => f(f()));

// single argument, implicit return.

let f: num -> num = x => x;

assert(annotations(f)[0] == num -> num);

typecheck(() => f(1));
typecheck(() => f(f(1)));

typefail(() => f());
typefail(() => f(true));
typefail(() => f(f(true)));

// no argument, explicit return.

let f: () -> num = () => { return 1; };

typecheck(() => { return f(); });

typefail(() => { return f(true); });

// single argument, explicit return.

let f: num -> num = x => { return x; };

typecheck(() => {
  return f(1);
});

typecheck(() => {
  return f(f(1));
});

typefail(() => {
  return f(true);
});

typefail(() => {
  return f(f(true));
});

// multiple arguments, implicit return.

let f: (num, num) -> num = (x,y) => 1;

assert(annotations(f)[0] == (num,num) -> num);

typecheck(() => f(1,1));
typecheck(() => f(f(1,1),f(1,1)));

typefail(() => f(1, true));
typefail(() => f(true, true));

// multiple arguments, explicit return.

typecheck(() => {
  return f(1,1);
});

typefail(() => {
  return f(1,true);
});

typefail(() => {
  return f(false,true);
});

// parameter annotation.
// --------------------------------------------

// single base type param constrains the function type.

typecheck(() => {
  let k = (a: num) => a;
  k(1);
});

typefail(() => {
  let k = (a: num) => a;
  k("a");
});

typefail(() => {
  let k = (a: num) => a;
  k();
});

// multiple base type params constrain the function type.

typecheck(() => {
  let k = (a: num, b: num) => a + b;
  k(1, 1);
});

typefail(() => {
  let k = (a: num, b: num) => a + b;
  k(1, "a");
});

// single arrow param constrains the function type.

typecheck(() => {
  let k = (a: num -> num) => a(1);
  k(x => x);
});

typecheck(() => {
  let k = (a: num -> num) => a(1);
  k(x => 1);
});

typefail(() => {
  let k = (a: num -> num) => a(1);
  k(x => "a");
});

// multiple arrow params constrain the function type.

typecheck(() => {
  let k = (a: num -> num, b: (num -> num) -> num) => b(a);

  k(x => x, f => f(1));
});

typefail(() => {
  let k = (a: num -> num, b: (num -> num) -> num) => b(a);

  k(x => x, f => f("a"));
});

typefail(() => {
  let k = (a: num -> num, b: (num -> num) -> num) => b(a);

  k(x => x, f => f(true));
});

// single base type param constrains the function body.

let g: string -> string = x => x;
let h: num -> num = x => x;

typecheck((a: num) => h(a));

typefail((a: num) => g(a));

// multiple base type params constrain the function body.

typecheck(
  (a: num, b: num) => {
    h(a);
    h(b);
  }
);

typefail(
  (a: num, b: num) => {
    h(a);
    g(b);
  }
);

// single arrow param constrains the function body.

typecheck((a: num -> num) => a(1));

typefail((a: num -> num) => a("a"));
typefail((a: num -> num) => a(true));

// multiple arrow params constrain the function body.

typecheck(
  (a: num -> num, b: (num -> num) -> num) => b(a)
);

typecheck(
  (a: num -> string, b: (num -> string) -> num) => b(a)
);

typefail(
  (a: num -> num, b: (string -> num) -> num) => b(a)
);

typefail(
  (a: num -> num, b: (num -> string) -> num) => b(a)
);

typefail(
  (a: string -> num, b: (num -> num) -> num) => b(a)
);

typefail(
  (a: num -> string, b: (num -> num) -> num) => b(a)
);

// homographic locals in adjacent scopes don't clash.

typecheck(() => {
  let k = (a: num) => h(a);
  let j = (a: string) => g(a);
});

typefail(() => {
  let k = (a: num) => h(a);
  let j = (a: string) => h(a);
});

typefail(() => {
  let k = (a: num) => g(a);
  let j = (a: string) => g(a);
});

typefail(() => {
  let k = (a: num) => g(a);
  let j = (a: string) => h(a);
});

// declaration annotations constrain parameter annotations.

typecheck(() => {
  let f: num -> num = (a: num) => a;
});

typefail(() => {
  let f: num -> num = (a: string) => a;
});

// declaration annotations constrain return types.

typecheck(() => {
  let f: () -> num = () => 1;
});

typefail(() => {
  let f: () -> num = () => true;
});

// negation.

typecheck(() => !true);
typecheck(() => !false);

typefail(() => !1);
typefail(() => !"string");
typefail(() => !nil);
typefail(() => !undefined);

// classes.
// --------------------------------------------

// class instantiation.

// zero parameter initializer.

class A {}

typecheck(() => A());

typefail(() => A(1));

// one parameter initializer.

class B { init(a) => {} }

typecheck(() => B(1));

typefail(() => B());

// annotated parameter.

class C { init(a: num) => {} }

typecheck(() => C(1));

typefail(() => C(true));

// returns TInstance.

typecheck(() => ((x: A) => {})(A()));
typecheck(() => ((x: B) => {})(B(1)));
typecheck(() => ((x: num -> C) => x(1))(C));

typefail(() => ((x: B) => {})(A()));
typefail(() => ((x: A) => {})(B(1)));
typefail(() => ((x: bool -> C) => x(1))(C));

// reconstruction.
// --------------------------------------------

// unit only unifies with itself.

let k = a => a;

typefail(() => k());

typecheck(() => k(1));
typecheck(() => k(true));
typecheck(() => k(nil));

// infer the type of a function from its application.

let type = SimpleTypeSystem.type;

let t = type(h => h(1)).domain;

assert(t is TFunction);
assert(t.domain is TNumber);
assert(t.range is TVar);

let t = type(h => h(true)).domain;

assert(t is TFunction);
assert(t.domain is TBoolean);
assert(t.range is TVar);

let t = type(h => h("a")).domain;

assert(t is TFunction);
assert(t.domain is TString);
assert(t.range is TVar);

// infer the type of a function from its body.

let f: num -> num = x => 1;
let t = type(x => f(x));

assert(t == num -> num);

let g: num -> bool = x => true;
let t = type(x => (g . f)(x));

assert(t == num -> bool);

let f: (num, num) -> num = (x,y) => 1;
let t = type((x,y) => f(x,y));

assert(t == TProduct([num, num]) -> num);

// with constraints on upvalues.

let f: (num, num) -> bool = (x,y) => true;
let t = type(x y => f(x,y));

assert(t == num -> (num -> bool));

let f: (num, num, num) -> bool = (x,y,z) => true;
let t = type(x y z => f(x,y,z));

assert(t == (num -> (num -> (num -> bool))));

// infer the type of application.

let infix unifies = (x, y) => SimpleTypeSystem.newState().unify(x ~ y);

let a = Type(), b = Type(), c = Type();

let f = g x => g(x);
let t = type(f);

assert(t unifies ((a -> b) -> (a -> b)));
assert(t unifies ((b -> a) -> (b -> a)));

assert(!(t unifies ((a -> a) -> (a -> b))));
assert(!(t unifies ((b -> b) -> (a -> b))));

assert(!(t unifies ((a -> b) -> (a -> a))));
assert(!(t unifies ((a -> b) -> (b -> b))));

assert(!(t unifies ((b -> a) -> (a -> b))));
assert(!(t unifies ((a -> b) -> (b -> a))));

// infer the type of composition.

let @ = f g x => f(g(x));
let t = type(@);

assert(t unifies ((a -> b) -> ((c -> a) -> (c -> b))));
assert(!(t unifies ((c -> a) -> ((a -> b) -> (c -> b)))));
