
let typecheck = x => assert(
  SubtypeSystem.typecheck(x).success()
);
let typefail = x => assert(
  SubtypeSystem.typecheck(x).failure()
);

// arguments must be subtypes.

let f: num -> void;
let g: bool -> void;

typefail((x: num || bool) => f(x));
typefail((x: num || bool) => g(x));

let f: (bool || string) -> void = x => {};

typecheck((x: bool) => f(x));
typecheck((x: string) => f(x));
typecheck((x: bool || string) => f(x));

typefail((x: num) => f(x));
typefail((x: bool || num) => f(x));
typefail((x: string || num) => f(x));
typefail((x: bool || string || num) => f(x));

// the subtype relation for functions is contravariant in the domain
// and covariant in the range.

// contravariant domains:

let f: (bool -> void) -> void = f => {};

// (bool -> void) -> void < ((bool || string) -> void) -> w
//   .. (bool -> void) > (bool || string) -> void
//   .. bool           < (bool || string)

typecheck((x: (bool || string) -> void) => f(x));

let f: ((bool || string) -> void) -> void = f => {};

typefail((x: bool -> void) => f(x));
typefail((x: string -> void) => f(x));

typecheck((x: (bool || string) -> void) => f(x));
typecheck((x: (bool || string || num) -> void) => f(x));

// covariant ranges:

let f: (() -> bool) -> void = g => {};

typefail((x: () -> (bool || string)) => f(x));

let f: (() -> (bool || string)) -> void = g => {};

typecheck((x: () -> bool) => f(x));
typecheck((x: () -> string) => f(x));
typecheck((x: () -> (bool || string)) => f(x));

typefail((x: () -> (bool || string || num)) => f(x));

// sums of products.

let f: (num, num) || (string, string) -> void = x => {};

typecheck((x: (string, string)) => f(x));
typecheck((x: (num, num)) => f(x));

typefail((x: (num, string)) => f(x));
typefail((x: (string, num)) => f(x));

// reconstruction.

let f: (num || string) -> void = x => {};

let type = SubtypeSystem.type(x => f(x));

assert(type == (num || string) -> void);

// products of sums.

let f: (num || string, num || bool) -> void = (x,y) => {};

typecheck((x: num, y: num) => f(x,y));
typecheck((x: num, y: bool) => f(x,y));
typecheck((x: string, y: num) => f(x,y));
typecheck((x: string, y: bool) => f(x,y));
typecheck((x: num || string, y: num) => f(x,y));
typecheck((x: num || string, y: bool) => f(x,y));
typecheck((x: string, y: num || bool) => f(x,y));
typecheck((x: num, y: num || bool) => f(x,y));

// negation.

typecheck(() => !true);
typecheck(() => !false);
typecheck(() => !nil);
typecheck(() => !undefined);

typefail(() => !1);
typefail(() => !"string");

// classes.

class A {}
class B extends A {}
class C extends B {}

let f: A -> A = x => x;

// subclasses are subtypes.

typecheck((x: B) => f(x));

// the relation is reflexive.

typecheck((x: A) => f(x));

// transitive.

typecheck((x: C) => f(x));

let f: C -> C = x => x;

typecheck((x: C) => f(x));

// asymmetric.

typefail((x: B) => f(x));
typefail((x: A) => f(x));

// membership.

class A {}

typecheck(x => x in A());

class B {
  __in__(x: num) => false;
}

typecheck(x => x in B());
typecheck(x => 1 in B());

typefail(x => true in B());
