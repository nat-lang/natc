
// argument must be subtype of parameter.

let f: num -> void;
let g: bool -> void;

typefail((x: num or bool) => f(x));
typefail((x: num or bool) => g(x));

let f: (bool or string) -> void = x => {};

typecheck((x: bool) => f(x));
typecheck((x: string) => f(x));
typecheck((x: bool or string) => f(x));

typefail((x: num) => f(x));
typefail((x: bool or num) => f(x));
typefail((x: string or num) => f(x));
typefail((x: bool or string or num) => f(x));

// the subtype relation for functions is contravariant
// in the domain and covariant in the range.

// contravariant domains.

let f: (bool -> void) -> void = f => {};

// (bool -> void) -> void < ((bool or string) -> void) -> w
//   .. (bool -> void) > (bool or string) -> void
//   .. bool           < (bool or string)

typecheck((x: (bool or string) -> void) => f(x));

let f: ((bool or string) -> void) -> void = f => {};

typefail((x: bool -> void) => f(x));
typefail((x: string -> void) => f(x));

typecheck((x: (bool or string) -> void) => f(x));
typecheck((x: (bool or string or num) -> void) => f(x));

// covariant ranges.

let f: (() -> bool) -> void = g => {};

typefail((x: () -> (bool or string)) => f(x));

let f: (() -> (bool or string)) -> void = g => {};

typecheck((x: () -> bool) => f(x));
typecheck((x: () -> string) => f(x));
typecheck((x: () -> (bool or string)) => f(x));

typefail((x: () -> (bool or string or num)) => f(x));

// sums of products.

let f: (TProduct(num, num) or TProduct(string, string)) -> void = x => {};

typecheck((x: (string, string)) => f(x));
typecheck((x: (num, num)) => f(x));

typefail((x: (num, string)) => f(x));
typefail((x: (string, num)) => f(x));

// reconstruction.

let f: (num or string) -> void = x => {};

let t = SubtypeSystem.type(x => f(x));

assert(t == (num or string) -> void);

// products of sums.

let f: (num or string, num or bool) -> void = (x,y) => {};

typecheck((x: num, y: num) => f(x,y));
typecheck((x: num, y: bool) => f(x,y));
typecheck((x: string, y: num) => f(x,y));
typecheck((x: string, y: bool) => f(x,y));
typecheck((x: num or string, y: num) => f(x,y));
typecheck((x: num or string, y: bool) => f(x,y));
typecheck((x: string, y: num or bool) => f(x,y));
typecheck((x: num, y: num or bool) => f(x,y));

// negation.

typecheck(() => !true);
typecheck(() => !false);
typecheck(() => !nil);
typecheck(() => !undefined);

typefail(() => !1);
typefail(() => !"string");

typecheck((f: bool -> bool, x: bool) => !f(x));
typecheck((f: bool -> undef, x: bool) => !f(x));
typecheck((f: bool -> void, x: bool) => !f(x));

typefail((f: bool -> num, x: bool) => !f(x));
typefail((f: bool -> string, x: bool) => !f(x));

// classes.

class A {}
class B extends A {}
class C extends B {}

let f: A -> A = x => x;

// subclasses are subtypes.

typecheck((x: B) => f(x));

// the relation is reflexive.

typecheck((x: A) => f(x));

// transitive.

typecheck((x: C) => f(x));

let f: C -> C = x => x;

typecheck((x: C) => f(x));

// asymmetric.

typefail((x: B) => f(x));
typefail((x: A) => f(x));

// membership.

class A {}

typecheck(x => x in A());

class B {
  __in__(x: num) => false;
}

typecheck(x => x in B());
typecheck(x => 1 in B());

typefail(x => true in B());

// value must be subtype of its annotation.

class A {}
class B extends A {}
class C extends B {}

typecheck(() => {
  let x: Object = A();
});

typecheck(() => {
  let x: A = A();
});

typecheck(() => {
  let x: A = B();
});

typecheck(() => {
  let x: A = C();
});

typecheck(() => {
  let x: B = B();
});

typecheck(() => {
  let x: B = C();
});

typecheck(() => {
  let x: C = C();
});

typefail(() => {
  let x: A = Object();
});

typefail(() => {
  let x: B = A();
});

typefail(() => {
  let x: C = B();
});

typefail(() => {
  let x: C = A();
});

// set instance type inference.

let t = type({1,2,3});
assert(t == TSet(num));

let t = type({1,true});
assert(t == TSet(TSum(num, bool)));

let t = type({});
assert(t unifies (TSet(typeVar())));

// exceptions.

typecheck(() => { throw Error(""); });
typefail(() => { throw 1; });

class Error' extends Error {}

typecheck(() => { throw Error'(""); });

