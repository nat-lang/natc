let f;

// constant function to literal.

f <- (a) => 1;

assert(type(f.signature) == ASTSignature);
assert(f.signature.entries()[0][1] == "a");

// explicit and implicit returns.
assert(len(f.block.statements) == 2);

// explicit.
assert(type(f.block.statements[0]) == ASTReturnStmt);
assert(type(f.block.statements[0].data) == ASTLiteral);
assert(f.block.statements[0].data.data == 1);

// implicit.
assert(type(f.block.statements[1]) == ASTReturnStmt);
assert(type(f.block.statements[1].data) == ASTLiteral);
assert(f.block.statements[1].data.data == nil);

// constant function to global.
f <- (a) => c;

// explicit and implicit returns.
assert(len(f.block.statements) == 2);

// explicit.
assert(type(f.block.statements[0]) == ASTReturnStmt);
assert(type(f.block.statements[0].data) == ASTGlobal);
assert(f.block.statements[0].data.data == "c");

// implicit.
assert(type(f.block.statements[1]) == ASTReturnStmt);
assert(type(f.block.statements[1].data) == ASTLiteral);
assert(f.block.statements[1].data.data == nil);

// constant function to local.

f <- (a) => a;

// explicit and implicit returns.
assert(len(f.block.statements) == 2);

// explicit.
assert(type(f.block.statements[0]) == ASTReturnStmt);
assert(type(f.block.statements[0].data) == ASTLocal);
assert(f.block.statements[0].data.data == 1);

// implicit.
assert(type(f.block.statements[1]) == ASTReturnStmt);
assert(type(f.block.statements[1].data) == ASTLiteral);
assert(f.block.statements[1].data.data == nil);

// function to binary application.

f <- (a) => a + 1;

let r = f.block.statements[0];

assert(type(r) == ASTReturnStmt);
assert(type(r.data) == ASTApp);
assert(r.data.fn.data == "+");

f <- (a) => +(a, 1);

let r = f.block.statements[0];
assert(type(r) == ASTReturnStmt);
assert(type(r.data) == ASTApp);
assert(r.data.fn.data == "+");

f <- (a) => a and true;

let r = f.block.statements[0];
assert(type(r) == ASTReturnStmt);
assert(type(r.data) == ASTApp);
assert(r.data.fn.data == "and");

f <- (a) => a or true;

let r = f.block.statements[0];
assert(type(r) == ASTReturnStmt);
assert(type(r.data) == ASTApp);
assert(r.data.fn.data == "or");

f <- (a) => a implies b;

let r = f.block.statements[0];
assert(type(r) == ASTReturnStmt);
assert(type(r.data) == ASTApp);
assert(r.data.fn.data == "implies");

// function to function.

f <- (g) => (x) => 1;

let r = f.block.statements[0];

assert(type(r.data) == ASTClosure);
assert(type(r.data.block.statements[0].data) == ASTLiteral);

f <- (g) => (x) => g(x);

let r = f.block.statements[0];

assert(type(f.block.statements[0].data) == ASTClosure);
assert(type(r.data.block.statements[0].data) == ASTApp);

f <- (f, g) => (x) => f(g(x));

let r = f.block.statements[0];

assert(type(f.block.statements[0].data) == ASTClosure);
assert(type(r.data.block.statements[0].data) == ASTApp);