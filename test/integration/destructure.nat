
// constant function to literal.

let f <- (a) => 1;

assert(vType(f.function) == OFunction);
assert(vType(f.function.signature) == OFunction);
assert(f.upvalues is Sequence);

assert(f.signature() is ASTSignature);
assert(len(f.signature().params) == 1);

let p = f.signature().params[0];

assert(p is ASTParameter);
assert(p.id == 1);
assert(p.value == nil);
assert(p.type == undefined);

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTLiteral);
assert(f[0][0].value == 1);

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].value == nil);

// constant function to global.
f <- (a) => c;

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTGlobal);
assert(f[0][0].id == "c");

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].value == nil);

// constant function to local.
f <- (a) => a;

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTLocal);
assert(f[0][0].id == 1);

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].value == nil);

// function to infix.

f <- (a) => a + 1;

let r = f[0];

assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].id == "+");

f <- (a) => +(a, 1);

let r = f[0];
assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].id == "+");

// function to postfix.

f <- (a) => [1,2,3];

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTApp);
assert(f[0][0][0].id == "Sequence");
assert(f[0][0][1].resolve() == [1,2,3]);

// function to function.

f <- (g) => (x) => 1;

assert(f[0][0] is ASTClosure);

assert(f[0][0][0][0] is ASTLiteral);

f <- g x => 1;

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTLiteral);

f <- (g) => (x) => g(x);

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTApp);

f <- (f, g) => (x) => f(g(x));

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTApp);

// local assignment.

f <- (g) => {
  let a = 1;
  return a;
};

assert(len(f.children) == 3);

assert(f[0] is ASTLocalValueAssignment);
assert(f[0][1] is ASTLiteral);
assert(f[1] is ASTReturn);
assert(f[2] is ASTImplicitReturn);

f <- (g) => {
  let k = (x) => 1;
  k(1);
};

assert(len(f.children) == 3);

assert(f[0] is ASTLocalValueAssignment);
assert(f[0][1] is ASTClosure);
assert(f[1] is ASTExprStatement);
assert(f[2] is ASTImplicitReturn);

f <- (g) => {
  let k = (x) => 1;
  let j = 1;
  k(j);
};

assert(len(f.children) == 4);

// k.
assert(f[0] is ASTLocalValueAssignment);
assert(f[0][1] is ASTClosure);

// j.
assert(f[1] is ASTLocalValueAssignment);
assert(f[1][1] is ASTLiteral);

// k(j).
assert(f[2] is ASTExprStatement);
assert(f[3] is ASTImplicitReturn);

let f <- () => {
  let a = 1;
  a;
  a = 2;
  a;
};

assert(f[0] is ASTLocalValueAssignment);
assert(f[0][0] is ASTLocal);
assert(f[0][1] is ASTLiteral);

assert(f[1] is ASTExprStatement);
assert(f[1][0] is ASTLocal);

assert(f[2] is ASTLocalValueAssignment);
assert(f[2][0] is ASTLocal);
assert(f[2][1] is ASTLiteral);

assert(f[3] is ASTExprStatement);
assert(f[3][0] is ASTLiteral);
assert(f[3][0].resolve() == 2);

assert(f[4] is ASTExprStatement);
assert(f[4][0] is ASTLocal);

// negation.

let f <- (a) => !a;

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTNegation);
assert(f[0][0][0] is ASTLocal);

// equality.

let f <- (x, y) => x == y;

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTEquality);
assert(f[0][0][0] is ASTLocal);
assert(f[0][0][1] is ASTLocal);

let f <- (x, y) => x != y;

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTNegation);

assert(f[0][0][0] is ASTEquality);
assert(f[0][0][0][0] is ASTLocal);
assert(f[0][0][0][1] is ASTLocal);

// boolean operators.
// these now require jump ast as they short circuit.

// f <- (a) => a and true;

// let r = f[0];
// assert(r is ASTReturn);
// assert(r[0] is ASTApp);
// assert(r[0][0].id == "and");

// f <- (a) => a or true;

// let r = f[0];
// assert(r is ASTReturn);
// assert(r[0] is ASTApp);
// assert(r[0][0].id == "or");

// f <- (a) => a implies b;

// let r = f[0];
// assert(r is ASTReturn);
// assert(r[0] is ASTApp);
// assert(r[0][0].id == "implies");

// property access.

let obj = Object();
obj.one = 2;

f <- () => obj.one;

let r = f[0][0];

assert(r is ASTPropertyAccess);
assert(r[0] is ASTGlobal);
assert(r[0].id == "obj");
assert(r[0].resolve() == obj);
assert(r[1] is ASTLiteral);
assert(r[1].resolve() == "one");

// property assignment.

f <- () => {
  let a;
  a.x = 1;
};

assert(f[0] is ASTLocalValueAssignment);
assert(f[0][1] is ASTLiteral);

assert(f[1] is ASTPropertyAssignment);

assert(f[1][0] is ASTLocal);
assert(f[1][1] is ASTLiteral);
assert(f[1][1].resolve() == "x");
assert(f[1][2] is ASTLiteral);
assert(f[1][2].resolve() == 1);

// membership.

f <- () => 1 in [1,2];

let r = f[0][0];

assert(r is ASTMembership);
assert(r[0] is ASTLiteral);
assert(r[0].resolve() == 1);
assert(r[1] is ASTApp);
assert(r[1].resolve() == [1,2]);

// closures.

f <- (x,z) => {
  let y;
  
  let g = () => x + z;
  let h = () => x + y;
  let j = () => {
    let a;
    return () => x + y + a;
  };
};

// upvalues.

// upvalues identify with the locals they close over.

f.uniquelyIdentifyVariables(NameSupply());

let x = f.signature().params[0];
let z = f.signature().params[1];
let y = f[0][0];

let g = f[1][1];
let h = f[2][1];
let j = f[3][1];

let g_x_up = g[0][0][1][0];
let g_z_up = g[0][0][1][1];

assert(g_x_up.uuid == x.uuid);
assert(g_z_up.uuid == z.uuid);

let h_x_up = h[0][0][1][0];
let h_y_up = h[0][0][1][1];

assert(h_x_up.uuid == x.uuid);
assert(h_y_up.uuid == y.uuid);

let a = j[0][0];
let j_x_up = j[1][0][0][0][1][0][1][0];
let j_y_up = j[1][0][0][0][1][0][1][1];
let j_a_up = j[1][0][0][0][1][1];

assert(j_x_up.uuid == x.uuid);
assert(j_y_up.uuid == y.uuid);
assert(j_a_up.uuid == a.uuid);

// ASTUpvalues resolve to the values of their upvalues.

let g = (() => {
  let x = 1;
  let f <- () => x;
  return (f, y => { x = y; });
})();

let f = g[0];
let set = g[1];

assert(f[0][0] is ASTUpvalue);
assert(f[0][0].resolve() == 1);

set(2);
assert(f[0][0].resolve() == 2);

// overloaded functions.

f <- 1 => true | 2 => false;

assert(vType(f.overload) == OOverload);
assert(f.count == 2);
assert(f[0] is ASTClosure);
assert(f[1] is ASTClosure);

// classes.

// methods.

class A { f(a) => this; }

let a = A();
let f <- a.f;

assert(f is ASTMethod);

assert(f.klass == A);
assert(vType(f.method) == OBoundFunction);
assert(f.receiver == a);
assert(f[0] is ASTClosure);

assert(vType(f[0].function) == OFunction);
assert(vType(f[0].function.signature) == OFunction);
assert(f[0].upvalues is Sequence);
assert(f[0].signature() is ASTSignature);
assert(len(f[0].signature().params) == 1);

let p = f[0].signature().params[0];

assert(p is ASTParameter);
assert(p.id == 1);
assert(p.value == nil);
assert(p.type == undefined);

// membership in methods.

class A {
  f(x) => x in this.y;
}

let a = A();
let f <- a.f;

assert(f is ASTMethod);
assert(f[0] is ASTClosure);
assert(f[0][0] is ASTReturn);
assert(f[0][0][0] is ASTMembership);
assert(f[0][0][0][0] is ASTLocal);
assert(f[0][0][0][1] is ASTPropertyAccess);
assert(f[0][0][0][1][0] is ASTLocal);
assert(f[0][0][0][1][1] is ASTLiteral);

// invocation.

f <- () => a.f();

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTInvocation);
assert(f[0][0][0].resolve() is A);
assert(f[0][0][1] == "f");
assert(f[0][0][2].leaf());

f <- () => a.f(1,2,3);

assert(f[0] is ASTReturn);
assert(f[0][0] is ASTInvocation);
assert(f[0][0][0].resolve() is A);
assert(f[0][0][1] == "f");
assert(f[0][0][2].resolve() == [1,2,3]);

// type annotation.

f <- () => {
  let f: 1 = () => 1;
};

assert(f[0] is ASTLocalValueAssignment);
assert(f[0][1] is ASTClosure);

assert(f[1] is ASTLocalTypeAssignment);
assert(f[1][1] is ASTLiteral);
assert(f[1][1].resolve() == 1);

f <- () => {
  let k: num -> (num -> num) = (a: num -> num) => a(1);
};

// two type assignments for 'k':
// (0) for the let declaration,
// (1) for the signature.

let t0 = f[1];

assert(t0 is ASTLocalTypeAssignment);
assert(t0[1] is ASTApp);
assert(t0[1].resolve() == num -> (num -> num));

// the closure's signature lives on its node.

let k = f[0][1];

assert(k is ASTClosure);
assert(k.signature() is ASTSignature);

let a = k.signature().params[0];

assert(a is ASTParameter);
assert(a.type is TFunction);
assert(a.type.domain == num);
assert(a.type.range == num);

// implicitly abstract type variables in function signatures.

f <- () => {
  let k = (a: w -> w) => a;
};

let k = f[0][1];

assert(k is ASTClosure);
assert(vType(k.function.signature) == OFunction);
assert(k.signature() is ASTSignature);
assert(len(k.signature().params) == 1);

let p = k.signature().params[0];

assert(p is ASTParameter);
assert(p.id == 1);
assert(p.value == nil);
assert(p.type is ->);