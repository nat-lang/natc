
// constant function to literal.

let f <- (a) => 1;

assert(f.name == "lambda");
assert(f.signature is ASTSignature);
assert(type(f.function) == TFunction);

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTLiteral);
assert(f[0][0].data == 1);

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].data == nil);

// constant function to global.
f <- (a) => c;

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTGlobal);
assert(f[0][0].data == "c");

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].data == nil);

// constant function to local.
f <- (a) => a;

// explicit and implicit returns.
assert(len(f.children) == 2);

// explicit.
assert(f[0] is ASTReturn);
assert(f[0][0] is ASTLocal);
assert(f[0][0].data == 1);

// implicit.
assert(f[1] is ASTImplicitReturn);
assert(f[1][0] is ASTLiteral);
assert(f[1][0].data == nil);

// function to binary application.

f <- (a) => a + 1;

let r = f[0];

assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].data == "+");

f <- (a) => +(a, 1);

let r = f[0];
assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].data == "+");

f <- (a) => a and true;

let r = f[0];
assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].data == "and");

f <- (a) => a or true;

let r = f[0];
assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].data == "or");

f <- (a) => a implies b;

let r = f[0];
assert(r is ASTReturn);
assert(r[0] is ASTApp);
assert(r[0][0].data == "implies");

// function to function.

f <- (g) => (x) => 1;

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTLiteral);

f <- (g) => (x) => g(x);

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTApp);

f <- (f, g) => (x) => f(g(x));

assert(f[0][0] is ASTClosure);
assert(f[0][0][0][0] is ASTApp);

// local assignment.

f <- (g) => {
  let a = 1;
  return a;
};

assert(len(f.children) == 4);

assert(f[0] is ASTLocalTypeAssignment);
assert(f[1] is ASTLocalValueAssignment);
assert(f[1][1] is ASTLiteral);
assert(f[2] is ASTReturn);
assert(f[3] is ASTImplicitReturn);

f <- (g) => {
  let k = (x) => 1;
  k(1);
};

assert(len(f.children) == 4);

assert(f[0] is ASTLocalTypeAssignment);
assert(f[1] is ASTLocalValueAssignment);
assert(f[1][1] is ASTClosure);
assert(f[2] is ASTExprStatement);
assert(f[3] is ASTImplicitReturn);

f <- (g) => {
  let k = (x) => 1;
  let j = 1;
  k(j);
};

assert(len(f.children) == 6);
// k.
assert(f[0] is ASTLocalTypeAssignment);
assert(f[1] is ASTLocalValueAssignment);
assert(f[1][1] is ASTClosure);
// j.
assert(f[2] is ASTLocalTypeAssignment);
assert(f[3] is ASTLocalValueAssignment);
assert(f[3][1] is ASTLiteral);
// k(j).
assert(f[4] is ASTExprStatement);
assert(f[5] is ASTImplicitReturn);

// resolution, aka evaluation.

// obj language.

f <- (g) => {
  let k = 1 + 1;
};

assert(f[1][1] is ASTApp);
assert(f[1][1].resolve() == 2);

// type annotation.

f <- () => {
  let k = (a: num -> num) => a(1);
};

assert(f[1][1] is ASTClosure);

let closure = f[1][1];
assert(closure.signature.params[0] is ASTLocalTypeAssignment);

let typeAssignment = closure.signature.params[0];
assert(typeAssignment[1].resolve() is TFunction);
