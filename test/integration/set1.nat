
// null set;

assert({}.subsetEq({}));
assert(!{}.subset({}));

assert({}.supsetEq({}));
assert(!{}.supset({}));
assert({}.union({}) == {});
assert({}.intersection({}) == {});
assert({}.complement({}) == {});

assert(!(1 in {}));
assert(!{}(1));

let set;

// num set.

set = {1,2,3};

assert(set(1));

assert(1 in set);
assert(2 in set);
assert(3 in set);
assert(!(4 in set));
  
assert(set.subset({1,2,3,4}));
assert(set.subsetEq({1,2,3,4}));

assert(set.supset({1,2}));
assert(set.supsetEq({1,2}));

assert(set.subsetEq({1,2,3}));
assert(set.supsetEq({1,2,3}));

assert(set == {1,2,3});

assert(set.union({4,5,6}) == {1,2,3,4,5,6});
assert(set.intersection({2,3,4}) == {2,3});
assert(set.complement({1,2}) == {3});

// string set.

set = {"a","b","c"};

assert(set("a"));

assert("a" in set);
assert("b" in set);
assert("c" in set);
assert(!("d" in set));

assert(set.subset({"a","b","c","d"}));
assert(set.subsetEq({"a","b","c","d"}));

assert(set.supset({"a","b"}));
assert(set.supsetEq({"a","b"}));

assert(set.subsetEq({"a","b","c"}));
assert(set.supsetEq({"a","b","c"}));

assert(set == {"a","b","c"});
assert(set.union({"d","e","f"}) == {"a","b","c","d","e","f"});
assert(set.complement({"a","b"}) == {"c"});
