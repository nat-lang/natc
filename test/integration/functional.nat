
// composition.
// --------------------------------------

let f = (a) => a + 1;
let g = f . f;

assert(g(1) == 3);

let g = ((a) => a) . f;

assert(g(1) == 2);

// variadicity
// --------------------------------------

// 100% variadic.

let h;

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h();

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 1);
};
h(1);

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 2);
  assert(args[0] == 1);
  assert(args[1] == 2);
};
h(1,2);

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 3);
  assert(args[0] == 1);
  assert(args[1] == 2);
  assert(args[2] == 3);
};
h(1,2,3);

// positional + variadic.

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1);

h = (x, y, *args) => {
  assert(x == 1);
  assert(y == 2);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1,2);

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 2);
};
h(1,2);

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 2);
  assert(args[0] == 2);
  assert(args[1] == 3);
};
h(1,2,3);

h = (x, y, *args) => {
  assert(x == 1);
  assert(y == 2);

  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 3);
};
h(1,2,3);

h = (x, y, z, *args) => {
  assert(x == 1);
  assert(y == 2);
  assert(z == 3);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1,2,3);

// methods.

class Variadic {
  call(*args) => args;

  f(*args) => args;
}

let v = Variadic();

assert(v(1,2,3) == [1,2,3]);
assert(type(v(1,2,3)) == Sequence);

assert(v.f(1,2,3) == [1,2,3]);
assert(type(v.f(1,2,3)) == Sequence);