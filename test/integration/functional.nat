// signature parsing.
// --------------------------------------

let z;

let a = () => {};

let a = (a) => {};

let a = (a, b) => {};

let a = (a: z) => {};

let a = (a: z, b: z) => {};

let a = (a: z + z) => {};

let a = (a: z + z, b: z) => {};

let a = (a: z, b: z + z) => {};

let a = (a: z + z, b: z + z) => {};

let a = () => x((a: z, b: z) => {});

// anonymous.
// --------------------------------------

// immediate invocation no args.

assert(
  (() => { return 1; })() == 1
);

// immediate invocation with args.

assert(
  ((a) => { return a + 1; })(1) == 2
);

// as return values.

let fn = () => {
  return () => { return 1; };
};

assert(fn()() == 1);

// as closures.

let fn = () => {
  let a = 1;

  return (b) => { return a + b; };
};

assert(fn()(1) == 2);

// as arguments.

let compose = (f, g) => {
  return (a) => { return f(g(a)); };
};

let h = compose(
  (a) => { return a + 1; },
  (a) => { return a - 1; }
)(1);

assert(h == 1);

// composition.
// --------------------------------------

let f = (a) => a + 1;
let g = f . f;

assert(g(1) == 3);

let g = ((a) => a) . f;

assert(g(1) == 2);

// variadicity
// --------------------------------------

// 100% variadic.

let h;

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h();

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 1);
};
h(1);

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 2);
  assert(args[0] == 1);
  assert(args[1] == 2);
};
h(1,2);

h = (*args) => {
  assert(type(args) == Sequence);
  assert(len(args) == 3);
  assert(args[0] == 1);
  assert(args[1] == 2);
  assert(args[2] == 3);
};
h(1,2,3);

// positional & variadic.

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1);

h = (x, y, *args) => {
  assert(x == 1);
  assert(y == 2);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1,2);

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 2);
};
h(1,2);

h = (x, *args) => {
  assert(x == 1);

  assert(type(args) == Sequence);
  assert(len(args) == 2);
  assert(args[0] == 2);
  assert(args[1] == 3);
};
h(1,2,3);

h = (x, y, *args) => {
  assert(x == 1);
  assert(y == 2);

  assert(type(args) == Sequence);
  assert(len(args) == 1);
  assert(args[0] == 3);
};
h(1,2,3);

h = (x, y, z, *args) => {
  assert(x == 1);
  assert(y == 2);
  assert(z == 3);

  assert(type(args) == Sequence);
  assert(len(args) == 0);
};
h(1,2,3);

// variadic methods.

class Variadic {
  call(*args) => args;

  f(*args) => args;
}

let v = Variadic();

assert(v(1,2,3) == [1,2,3]);
assert(type(v(1,2,3)) == Sequence);

assert(v.f(1,2,3) == [1,2,3]);
assert(type(v.f(1,2,3)) == Sequence);

// argument spreading.
// --------------------------------------

// singleton.

let f = (x) => x + 1;
assert(f(..[1]) == 2);

// whole signature.

let f = (x,y) => x + y;
assert(f(..[1,1]) == 2);

let f = (a,b,c,d) => {
  if (a) return b(c,d);
};
let x = [true, +, 1, 3];
assert(f(..x) == 4);

let x = [false, +, 1, 3];
assert(f(..x) == nil);

let x = [true, -, 1, 3];
assert(f(..x) == (1 - 3));

// initial args.

let f = (x,y,z) => {
  z.push(x);
  z.push(y);
  return z;
};

let a = f(..[1,2], []);
assert(a == [1,2]);

// final args.

let f = (x,y,z) => {
  x.push(y);
  x.push(z);
  return x;
};

let a = f([], ..[1,2]);
assert(a == [1,2]);

// & variadic.

let f = (x,*y) => {
  for (z in y) {
    x.push(z);
  }
  return x;
};

let a = f([], ..[1]);
assert(a == [1]);

let a = f([], ..[1,2]);
assert(a == [1,2]);

let a = f([], ..[1,2,3]);
assert(a == [1,2,3]);